{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/Chainchat.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract Chainchat is ReentrancyGuard, Ownable {\n    /**\n     * @dev Struct representing a user in the dApp.\n     * @param username The username of the user.\n     * @param userAddress The address of the user.\n     * @param isRegistered A boolean indicating if the user is registered.\n     */\n    struct User {\n        string username;\n        address userAddress;\n        bool isRegistered;\n    }\n\n    mapping(address => User) public users;\n\n    /**l\n     * @dev Struct representing a post in the dApp.\n     * @param author The address of the user who created the post.\n     * @param content The content of the post.\n     * @param timestamp The time when the post was created.\n     * @param likes The number of likes the post has received.\n     * @param commentsCount The number of comments on the post.\n     * @param likedBy A mapping to track if a user has liked the post.\n     */\n    struct Post {\n        address author;\n        string content;\n        uint256 timestamp;\n        uint256 likes;\n        uint256 commentsCount;\n        mapping(address => bool) likedBy; // Track likes by user\n    }\n\n    /**\n     * @dev Struct representing a comment on a post.\n     * @param commenter The address of the user who made the comment.\n     * @param content The content of the comment.\n     * @param timestamp The time when the comment was made.\n     */\n    struct Comment {\n        address commenter;\n        string content;\n        uint256 timestamp;\n    }\n\n    mapping(uint256 => mapping(uint256 => Comment)) public postComments;\n    mapping(uint256 => uint256) public postCommentsCount;\n\n    Post[] public posts;\n\n    event UserRegistered(address indexed userAddress, string username);\n    event PostCreated(address indexed author, string content, uint256 timestamp);\n    event PostLiked(address indexed liker, uint256 indexed postId);\n    event CommentAdded(address indexed commenter, uint256 indexed postId, string content, uint256 timestamp);\n\n    /**\n     * @dev Modifier to check if the sender is a registered user.\n     */\n    modifier onlyRegisteredUser() {\n        require(users[msg.sender].isRegistered, \"User is not registered\");\n        _;\n    }\n\n    constructor() Ownable(msg.sender) {\n        transferOwnership(msg.sender);\n    }\n\n    /**\n     * @dev Registers a new user.\n     * @param _username The username chosen by the user.\n     */\n    function registerUser(string memory _username) external {\n        require(!users[msg.sender].isRegistered, \"User is already registered\");\n        require(bytes(_username).length > 0, \"Username should not be empty\");\n\n        users[msg.sender] = User({\n            username: _username,\n            userAddress: msg.sender,\n            isRegistered: true\n        });\n\n        emit UserRegistered(msg.sender, _username);\n    }\n\n    /**\n     * @dev Returns the user details for a given address.\n     * @param _userAddress The address of the user.\n     * @return The User struct for the given address.\n     */\n    function getUserByAddress(address _userAddress) external view returns (User memory) {\n        require(users[_userAddress].isRegistered, \"User not found\");\n        return users[_userAddress];\n    }\n\n    /**\n     * @dev Creates a new post.\n     * @param _content The content of the post.\n     */\n    function createPost(string memory _content) external onlyRegisteredUser {\n        require(bytes(_content).length > 0, \"Content should not be empty\");\n\n        Post storage newPost = posts.push();\n        newPost.author = msg.sender;\n        newPost.content = _content;\n        newPost.timestamp = block.timestamp;\n\n        emit PostCreated(msg.sender, _content, block.timestamp);\n    }\n\n    /**\n     * @dev Likes a post.\n     * @param _postId The ID of the post to like.\n     */\n    function likePost(uint256 _postId) external onlyRegisteredUser nonReentrant {\n        require(_postId < posts.length, \"Post does not exist\");\n\n        Post storage post = posts[_postId];\n        require(!post.likedBy[msg.sender], \"User has already liked this post\");\n\n        post.likes++;\n        post.likedBy[msg.sender] = true;\n\n        emit PostLiked(msg.sender, _postId);\n    }\n\n    /**\n     * @dev Adds a comment to a post.\n     * @param _postId The ID of the post to comment on.\n     * @param _content The content of the comment.\n     */\n    function addComment(uint256 _postId, string memory _content) external onlyRegisteredUser nonReentrant {\n        require(_postId < posts.length, \"Post does not exist\");\n        require(bytes(_content).length > 0, \"Comment should not be empty\");\n\n        uint256 commentId = postCommentsCount[_postId];\n        postComments[_postId][commentId] = Comment({\n            commenter: msg.sender,\n            content: _content,\n            timestamp: block.timestamp\n        });\n\n        postCommentsCount[_postId]++;\n        posts[_postId].commentsCount++;\n\n        emit CommentAdded(msg.sender, _postId, _content, block.timestamp);\n    }\n\n    /**\n     * @dev Returns the total number of posts.\n     * @return The total number of posts.\n     */\n    function getPostsCount() external view returns (uint256) {\n        return posts.length;\n    }\n\n    /**\n     * @dev Returns the details of a post.\n     * @param _postId The ID of the post.\n     * @return author The address of the post's author.\n     * @return content The content of the post.\n     * @return timestamp The time when the post was created.\n     * @return likes The number of likes the post has received.\n     * @return commentsCount The number of comments on the post.\n     */\n    function getPost(uint256 _postId) external view returns (\n        address author,\n        string memory content,\n        uint256 timestamp,\n        uint256 likes,\n        uint256 commentsCount\n    ) {\n        require(_postId < posts.length, \"Post does not exist\");\n        Post storage post = posts[_postId];\n        return (post.author, post.content, post.timestamp, post.likes, post.commentsCount);\n    }\n\n    /**\n     * @dev Returns the details of a comment on a post.\n     * @param _postId The ID of the post.\n     * @param _commentId The ID of the comment.\n     * @return commenter The address of the user who made the comment.\n     * @return content The content of the comment.\n     * @return timestamp The time when the comment was made.\n     */\n    function getComment(uint256 _postId, uint256 _commentId) external view returns (\n        address commenter,\n        string memory content,\n        uint256 timestamp\n    ) {\n        require(_postId < posts.length, \"Post does not exist\");\n        require(_commentId < postCommentsCount[_postId], \"Comment does not exist\");\n\n        Comment memory comment = postComments[_postId][_commentId];\n        return (comment.commenter, comment.content, comment.timestamp);\n    }\n}"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}