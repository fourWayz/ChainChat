{
  "address": "0xF4B7fEFAfE305E7552e12C17746D3f06BeDB4816",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "commenter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "postId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "content",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "CommentAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "content",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PostCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "liker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "postId",
          "type": "uint256"
        }
      ],
      "name": "PostLiked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "username",
          "type": "string"
        }
      ],
      "name": "UserRegistered",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_postId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_content",
          "type": "string"
        }
      ],
      "name": "addComment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_content",
          "type": "string"
        }
      ],
      "name": "createPost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_postId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_commentId",
          "type": "uint256"
        }
      ],
      "name": "getComment",
      "outputs": [
        {
          "internalType": "address",
          "name": "commenter",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "content",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_postId",
          "type": "uint256"
        }
      ],
      "name": "getPost",
      "outputs": [
        {
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "content",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "likes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "commentsCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPostsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "getUserByAddress",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "username",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "userAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isRegistered",
              "type": "bool"
            }
          ],
          "internalType": "struct Chainchat.User",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_postId",
          "type": "uint256"
        }
      ],
      "name": "likePost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "postComments",
      "outputs": [
        {
          "internalType": "address",
          "name": "commenter",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "content",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "postCommentsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "posts",
      "outputs": [
        {
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "content",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "likes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "commentsCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_username",
          "type": "string"
        }
      ],
      "name": "registerUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "string",
          "name": "username",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isRegistered",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7d58f3290d1dfe2d0601140716110935e16c17cef8a5f87374a8cc6cbbeccc40",
  "receipt": {
    "to": null,
    "from": "0x9409C4AB1163037027c91B47893632174d46e6BA",
    "contractAddress": "0xF4B7fEFAfE305E7552e12C17746D3f06BeDB4816",
    "transactionIndex": 0,
    "gasUsed": "2105591",
    "logsBloom": "0x
    "blockHash": "0x8fb78d81f0cf8020469d20792fac0bef37d5002b013b5e9b9177600134509a9b",
    "transactionHash": "0x7d58f3290d1dfe2d0601140716110935e16c17cef8a5f87374a8cc6cbbeccc40",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 6530526,
        "transactionHash": "0x7d58f3290d1dfe2d0601140716110935e16c17cef8a5f87374a8cc6cbbeccc40",
        "address": "0xF4B7fEFAfE305E7552e12C17746D3f06BeDB4816",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009409c4ab1163037027c91b47893632174d46e6ba"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x8fb78d81f0cf8020469d20792fac0bef37d5002b013b5e9b9177600134509a9b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 6530526,
        "transactionHash": "0x7d58f3290d1dfe2d0601140716110935e16c17cef8a5f87374a8cc6cbbeccc40",
        "address": "0xF4B7fEFAfE305E7552e12C17746D3f06BeDB4816",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000009409c4ab1163037027c91b47893632174d46e6ba",
          "0x0000000000000000000000009409c4ab1163037027c91b47893632174d46e6ba"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x8fb78d81f0cf8020469d20792fac0bef37d5002b013b5e9b9177600134509a9b"
      }
    ],
    "blockNumber": 6530526,
    "cumulativeGasUsed": "2105591",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f5a9899a7442744c2f6e67a9b7ea771a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"commenter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"CommentAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PostCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"}],\"name\":\"PostLiked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"}],\"name\":\"UserRegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_postId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_content\",\"type\":\"string\"}],\"name\":\"addComment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_content\",\"type\":\"string\"}],\"name\":\"createPost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_postId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_commentId\",\"type\":\"uint256\"}],\"name\":\"getComment\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"commenter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_postId\",\"type\":\"uint256\"}],\"name\":\"getPost\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"likes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commentsCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPostsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getUserByAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"}],\"internalType\":\"struct Chainchat.User\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_postId\",\"type\":\"uint256\"}],\"name\":\"likePost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"postComments\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"commenter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"postCommentsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"posts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"likes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commentsCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_username\",\"type\":\"string\"}],\"name\":\"registerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"addComment(uint256,string)\":{\"details\":\"Adds a comment to a post.\",\"params\":{\"_content\":\"The content of the comment.\",\"_postId\":\"The ID of the post to comment on.\"}},\"createPost(string)\":{\"details\":\"Creates a new post.\",\"params\":{\"_content\":\"The content of the post.\"}},\"getComment(uint256,uint256)\":{\"details\":\"Returns the details of a comment on a post.\",\"params\":{\"_commentId\":\"The ID of the comment.\",\"_postId\":\"The ID of the post.\"},\"returns\":{\"commenter\":\"The address of the user who made the comment.\",\"content\":\"The content of the comment.\",\"timestamp\":\"The time when the comment was made.\"}},\"getPost(uint256)\":{\"details\":\"Returns the details of a post.\",\"params\":{\"_postId\":\"The ID of the post.\"},\"returns\":{\"author\":\"The address of the post's author.\",\"commentsCount\":\"The number of comments on the post.\",\"content\":\"The content of the post.\",\"likes\":\"The number of likes the post has received.\",\"timestamp\":\"The time when the post was created.\"}},\"getPostsCount()\":{\"details\":\"Returns the total number of posts.\",\"returns\":{\"_0\":\"The total number of posts.\"}},\"getUserByAddress(address)\":{\"details\":\"Returns the user details for a given address.\",\"params\":{\"_userAddress\":\"The address of the user.\"},\"returns\":{\"_0\":\"The User struct for the given address.\"}},\"likePost(uint256)\":{\"details\":\"Likes a post.\",\"params\":{\"_postId\":\"The ID of the post to like.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"registerUser(string)\":{\"details\":\"Registers a new user.\",\"params\":{\"_username\":\"The username chosen by the user.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Chainchat.sol\":\"Chainchat\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"contracts/Chainchat.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Chainchat is ReentrancyGuard, Ownable {\\n    /**\\n     * @dev Struct representing a user in the dApp.\\n     * @param username The username of the user.\\n     * @param userAddress The address of the user.\\n     * @param isRegistered A boolean indicating if the user is registered.\\n     */\\n    struct User {\\n        string username;\\n        address userAddress;\\n        bool isRegistered;\\n    }\\n\\n    mapping(address => User) public users;\\n\\n    /**l\\n     * @dev Struct representing a post in the dApp.\\n     * @param author The address of the user who created the post.\\n     * @param content The content of the post.\\n     * @param timestamp The time when the post was created.\\n     * @param likes The number of likes the post has received.\\n     * @param commentsCount The number of comments on the post.\\n     * @param likedBy A mapping to track if a user has liked the post.\\n     */\\n    struct Post {\\n        address author;\\n        string content;\\n        uint256 timestamp;\\n        uint256 likes;\\n        uint256 commentsCount;\\n        mapping(address => bool) likedBy; // Track likes by user\\n    }\\n\\n    /**\\n     * @dev Struct representing a comment on a post.\\n     * @param commenter The address of the user who made the comment.\\n     * @param content The content of the comment.\\n     * @param timestamp The time when the comment was made.\\n     */\\n    struct Comment {\\n        address commenter;\\n        string content;\\n        uint256 timestamp;\\n    }\\n\\n    mapping(uint256 => mapping(uint256 => Comment)) public postComments;\\n    mapping(uint256 => uint256) public postCommentsCount;\\n\\n    Post[] public posts;\\n\\n    event UserRegistered(address indexed userAddress, string username);\\n    event PostCreated(address indexed author, string content, uint256 timestamp);\\n    event PostLiked(address indexed liker, uint256 indexed postId);\\n    event CommentAdded(address indexed commenter, uint256 indexed postId, string content, uint256 timestamp);\\n\\n    /**\\n     * @dev Modifier to check if the sender is a registered user.\\n     */\\n    modifier onlyRegisteredUser() {\\n        require(users[msg.sender].isRegistered, \\\"User is not registered\\\");\\n        _;\\n    }\\n\\n    constructor() Ownable(msg.sender) {\\n        transferOwnership(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Registers a new user.\\n     * @param _username The username chosen by the user.\\n     */\\n    function registerUser(string memory _username) external {\\n        require(!users[msg.sender].isRegistered, \\\"User is already registered\\\");\\n        require(bytes(_username).length > 0, \\\"Username should not be empty\\\");\\n\\n        users[msg.sender] = User({\\n            username: _username,\\n            userAddress: msg.sender,\\n            isRegistered: true\\n        });\\n\\n        emit UserRegistered(msg.sender, _username);\\n    }\\n\\n    /**\\n     * @dev Returns the user details for a given address.\\n     * @param _userAddress The address of the user.\\n     * @return The User struct for the given address.\\n     */\\n    function getUserByAddress(address _userAddress) external view returns (User memory) {\\n        require(users[_userAddress].isRegistered, \\\"User not found\\\");\\n        return users[_userAddress];\\n    }\\n\\n    /**\\n     * @dev Creates a new post.\\n     * @param _content The content of the post.\\n     */\\n    function createPost(string memory _content) external onlyRegisteredUser {\\n        require(bytes(_content).length > 0, \\\"Content should not be empty\\\");\\n\\n        Post storage newPost = posts.push();\\n        newPost.author = msg.sender;\\n        newPost.content = _content;\\n        newPost.timestamp = block.timestamp;\\n\\n        emit PostCreated(msg.sender, _content, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Likes a post.\\n     * @param _postId The ID of the post to like.\\n     */\\n    function likePost(uint256 _postId) external onlyRegisteredUser nonReentrant {\\n        require(_postId < posts.length, \\\"Post does not exist\\\");\\n\\n        Post storage post = posts[_postId];\\n        require(!post.likedBy[msg.sender], \\\"User has already liked this post\\\");\\n\\n        post.likes++;\\n        post.likedBy[msg.sender] = true;\\n\\n        emit PostLiked(msg.sender, _postId);\\n    }\\n\\n    /**\\n     * @dev Adds a comment to a post.\\n     * @param _postId The ID of the post to comment on.\\n     * @param _content The content of the comment.\\n     */\\n    function addComment(uint256 _postId, string memory _content) external onlyRegisteredUser nonReentrant {\\n        require(_postId < posts.length, \\\"Post does not exist\\\");\\n        require(bytes(_content).length > 0, \\\"Comment should not be empty\\\");\\n\\n        uint256 commentId = postCommentsCount[_postId];\\n        postComments[_postId][commentId] = Comment({\\n            commenter: msg.sender,\\n            content: _content,\\n            timestamp: block.timestamp\\n        });\\n\\n        postCommentsCount[_postId]++;\\n        posts[_postId].commentsCount++;\\n\\n        emit CommentAdded(msg.sender, _postId, _content, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Returns the total number of posts.\\n     * @return The total number of posts.\\n     */\\n    function getPostsCount() external view returns (uint256) {\\n        return posts.length;\\n    }\\n\\n    /**\\n     * @dev Returns the details of a post.\\n     * @param _postId The ID of the post.\\n     * @return author The address of the post's author.\\n     * @return content The content of the post.\\n     * @return timestamp The time when the post was created.\\n     * @return likes The number of likes the post has received.\\n     * @return commentsCount The number of comments on the post.\\n     */\\n    function getPost(uint256 _postId) external view returns (\\n        address author,\\n        string memory content,\\n        uint256 timestamp,\\n        uint256 likes,\\n        uint256 commentsCount\\n    ) {\\n        require(_postId < posts.length, \\\"Post does not exist\\\");\\n        Post storage post = posts[_postId];\\n        return (post.author, post.content, post.timestamp, post.likes, post.commentsCount);\\n    }\\n\\n    /**\\n     * @dev Returns the details of a comment on a post.\\n     * @param _postId The ID of the post.\\n     * @param _commentId The ID of the comment.\\n     * @return commenter The address of the user who made the comment.\\n     * @return content The content of the comment.\\n     * @return timestamp The time when the comment was made.\\n     */\\n    function getComment(uint256 _postId, uint256 _commentId) external view returns (\\n        address commenter,\\n        string memory content,\\n        uint256 timestamp\\n    ) {\\n        require(_postId < posts.length, \\\"Post does not exist\\\");\\n        require(_commentId < postCommentsCount[_postId], \\\"Comment does not exist\\\");\\n\\n        Comment memory comment = postComments[_postId][_commentId];\\n        return (comment.commenter, comment.content, comment.timestamp);\\n    }\\n}\",\"keccak256\":\"0x6e4403c77bea4473fca6baa8ec98739dcdeedd1ed147a09fb2cf6c68af897dd4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50336001600081905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361008c5760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016100839190610314565b60405180910390fd5b61009b816100b060201b60201c565b506100ab3361017660201b60201c565b61032f565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61018461020860201b60201c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036101f65760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016101ed9190610314565b60405180910390fd5b610205816100b060201b60201c565b50565b6102166102a160201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1661023a6102a960201b60201c565b73ffffffffffffffffffffffffffffffffffffffff161461029f576102636102a160201b60201c565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016102969190610314565b60405180910390fd5b565b600033905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102fe826102d3565b9050919050565b61030e816102f3565b82525050565b60006020820190506103296000830184610305565b92915050565b6124308061033e6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063725009d311610097578063aa7e568311610066578063aa7e5683146102a6578063c7303c61146102c2578063d82d72bf146102de578063f2fde38b1461030e576100f5565b8063725009d31461021c57806383624882146102385780638da5cb5b14610256578063a87430ba14610274576100f5565b80635193c94c116100d35780635193c94c1461019457806369c212f6146101c6578063704f1b94146101f6578063715018a614610212576100f5565b80630b1e7f83146100fa57806340731c241461012e5780634889275314610162575b600080fd5b610114600480360381019061010f91906116d7565b61032a565b6040516101259594939291906117e4565b60405180910390f35b610148600480360381019061014391906116d7565b610418565b6040516101599594939291906117e4565b60405180910390f35b61017c6004803603810190610177919061183e565b610566565b60405161018b9392919061187e565b60405180910390f35b6101ae60048036038101906101a9919061183e565b61074a565b6040516101bd9392919061187e565b60405180910390f35b6101e060048036038101906101db91906118e8565b610829565b6040516101ed91906119d9565b60405180910390f35b610210600480360381019061020b9190611b30565b610a14565b005b61021a610c2c565b005b610236600480360381019061023191906116d7565b610c40565b005b610240610e97565b60405161024d9190611b79565b60405180910390f35b61025e610ea4565b60405161026b9190611b94565b60405180910390f35b61028e600480360381019061028991906118e8565b610ece565b60405161029d93929190611bbe565b60405180910390f35b6102c060048036038101906102bb9190611bfc565b610fad565b005b6102dc60048036038101906102d79190611b30565b611268565b005b6102f860048036038101906102f391906116d7565b611411565b6040516103059190611b79565b60405180910390f35b610328600480360381019061032391906118e8565b611429565b005b6005818154811061033a57600080fd5b90600052602060002090600602016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600101805461038390611c87565b80601f01602080910402602001604051908101604052809291908181526020018280546103af90611c87565b80156103fc5780601f106103d1576101008083540402835291602001916103fc565b820191906000526020600020905b8154815290600101906020018083116103df57829003601f168201915b5050505050908060020154908060030154908060040154905085565b6000606060008060006005805490508610610468576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045f90611d04565b60405180910390fd5b60006005878154811061047e5761047d611d24565b5b906000526020600020906006020190508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16816001018260020154836003015484600401548380546104d290611c87565b80601f01602080910402602001604051908101604052809291908181526020018280546104fe90611c87565b801561054b5780601f106105205761010080835404028352916020019161054b565b820191906000526020600020905b81548152906001019060200180831161052e57829003601f168201915b50505050509350955095509550955095505091939590929450565b60006060600060058054905085106105b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105aa90611d04565b60405180910390fd5b60046000868152602001908152602001600020548410610608576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ff90611d9f565b60405180910390fd5b60006003600087815260200190815260200160002060008681526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805461069f90611c87565b80601f01602080910402602001604051908101604052809291908181526020018280546106cb90611c87565b80156107185780601f106106ed57610100808354040283529160200191610718565b820191906000526020600020905b8154815290600101906020018083116106fb57829003601f168201915b505050505081526020016002820154815250509050806000015181602001518260400151935093509350509250925092565b6003602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010180546107a090611c87565b80601f01602080910402602001604051908101604052809291908181526020018280546107cc90611c87565b80156108195780601f106107ee57610100808354040283529160200191610819565b820191906000526020600020905b8154815290600101906020018083116107fc57829003601f168201915b5050505050908060020154905083565b610831611654565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160149054906101000a900460ff166108c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b790611e0b565b60405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180606001604052908160008201805461091a90611c87565b80601f016020809104026020016040519081016040528092919081815260200182805461094690611c87565b80156109935780601f1061096857610100808354040283529160200191610993565b820191906000526020600020905b81548152906001019060200180831161097657829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900460ff1615151515815250509050919050565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160149054906101000a900460ff1615610aa4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9b90611e77565b60405180910390fd5b6000815111610ae8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610adf90611ee3565b60405180910390fd5b60405180606001604052808281526020013373ffffffffffffffffffffffffffffffffffffffff16815260200160011515815250600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000019081610b7091906120af565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff0219169083151502179055509050503373ffffffffffffffffffffffffffffffffffffffff167f48cac28ad4dc618e15f4c2dd5e97751182f166de97b25618318b2112aa951a2f82604051610c219190612181565b60405180910390a250565b610c346114af565b610c3e6000611536565b565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160149054906101000a900460ff16610ccf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc6906121ef565b60405180910390fd5b610cd76115fc565b6005805490508110610d1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1590611d04565b60405180910390fd5b600060058281548110610d3457610d33611d24565b5b906000526020600020906006020190508060050160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610dd3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dca9061225b565b60405180910390fd5b806003016000815480929190610de8906122aa565b919050555060018160050160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550813373ffffffffffffffffffffffffffffffffffffffff167f62500381f39eb6f48b6e6f104021ceeaca9e5354918dc17b4a15bf87c5f5d28b60405160405180910390a350610e94611642565b50565b6000600580549050905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6002602052806000526040600020600091509050806000018054610ef190611c87565b80601f0160208091040260200160405190810160405280929190818152602001828054610f1d90611c87565b8015610f6a5780601f10610f3f57610100808354040283529160200191610f6a565b820191906000526020600020905b815481529060010190602001808311610f4d57829003601f168201915b5050505050908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160149054906101000a900460ff16905083565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160149054906101000a900460ff1661103c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611033906121ef565b60405180910390fd5b6110446115fc565b600580549050821061108b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108290611d04565b60405180910390fd5b60008151116110cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c69061233e565b60405180910390fd5b60006004600084815260200190815260200160002054905060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018381526020014281525060036000858152602001908152602001600020600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101908161119891906120af565b50604082015181600201559050506004600084815260200190815260200160002060008154809291906111ca906122aa565b9190505550600583815481106111e3576111e2611d24565b5b90600052602060002090600602016004016000815480929190611205906122aa565b9190505550823373ffffffffffffffffffffffffffffffffffffffff167fdb68d60a2d5659f0528e369fe9a8cfdbec13beb23609aa9a7a5c2a2d973117e4844260405161125392919061235e565b60405180910390a350611264611642565b5050565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160149054906101000a900460ff166112f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ee906121ef565b60405180910390fd5b600081511161133b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611332906123da565b60405180910390fd5b600060056001816001815401808255809150500390600052602060002090600602019050338160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818160010190816113b391906120af565b504281600201819055503373ffffffffffffffffffffffffffffffffffffffff167fb5a2d6ecdc9bd09637c1de2e8e02011abe041770e16737ec2adfa54c8e0581c7834260405161140592919061235e565b60405180910390a25050565b60046020528060005260406000206000915090505481565b6114316114af565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036114a35760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161149a9190611b94565b60405180910390fd5b6114ac81611536565b50565b6114b761164c565b73ffffffffffffffffffffffffffffffffffffffff166114d5610ea4565b73ffffffffffffffffffffffffffffffffffffffff1614611534576114f861164c565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161152b9190611b94565b60405180910390fd5b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600260005403611638576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600081905550565b6001600081905550565b600033905090565b604051806060016040528060608152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000151581525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6116b4816116a1565b81146116bf57600080fd5b50565b6000813590506116d1816116ab565b92915050565b6000602082840312156116ed576116ec611697565b5b60006116fb848285016116c2565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061172f82611704565b9050919050565b61173f81611724565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561177f578082015181840152602081019050611764565b60008484015250505050565b6000601f19601f8301169050919050565b60006117a782611745565b6117b18185611750565b93506117c1818560208601611761565b6117ca8161178b565b840191505092915050565b6117de816116a1565b82525050565b600060a0820190506117f96000830188611736565b818103602083015261180b818761179c565b905061181a60408301866117d5565b61182760608301856117d5565b61183460808301846117d5565b9695505050505050565b6000806040838503121561185557611854611697565b5b6000611863858286016116c2565b9250506020611874858286016116c2565b9150509250929050565b60006060820190506118936000830186611736565b81810360208301526118a5818561179c565b90506118b460408301846117d5565b949350505050565b6118c581611724565b81146118d057600080fd5b50565b6000813590506118e2816118bc565b92915050565b6000602082840312156118fe576118fd611697565b5b600061190c848285016118d3565b91505092915050565b600082825260208201905092915050565b600061193182611745565b61193b8185611915565b935061194b818560208601611761565b6119548161178b565b840191505092915050565b61196881611724565b82525050565b60008115159050919050565b6119838161196e565b82525050565b600060608301600083015184820360008601526119a68282611926565b91505060208301516119bb602086018261195f565b5060408301516119ce604086018261197a565b508091505092915050565b600060208201905081810360008301526119f38184611989565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611a3d8261178b565b810181811067ffffffffffffffff82111715611a5c57611a5b611a05565b5b80604052505050565b6000611a6f61168d565b9050611a7b8282611a34565b919050565b600067ffffffffffffffff821115611a9b57611a9a611a05565b5b611aa48261178b565b9050602081019050919050565b82818337600083830152505050565b6000611ad3611ace84611a80565b611a65565b905082815260208101848484011115611aef57611aee611a00565b5b611afa848285611ab1565b509392505050565b600082601f830112611b1757611b166119fb565b5b8135611b27848260208601611ac0565b91505092915050565b600060208284031215611b4657611b45611697565b5b600082013567ffffffffffffffff811115611b6457611b6361169c565b5b611b7084828501611b02565b91505092915050565b6000602082019050611b8e60008301846117d5565b92915050565b6000602082019050611ba96000830184611736565b92915050565b611bb88161196e565b82525050565b60006060820190508181036000830152611bd8818661179c565b9050611be76020830185611736565b611bf46040830184611baf565b949350505050565b60008060408385031215611c1357611c12611697565b5b6000611c21858286016116c2565b925050602083013567ffffffffffffffff811115611c4257611c4161169c565b5b611c4e85828601611b02565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611c9f57607f821691505b602082108103611cb257611cb1611c58565b5b50919050565b7f506f737420646f6573206e6f7420657869737400000000000000000000000000600082015250565b6000611cee601383611750565b9150611cf982611cb8565b602082019050919050565b60006020820190508181036000830152611d1d81611ce1565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f436f6d6d656e7420646f6573206e6f7420657869737400000000000000000000600082015250565b6000611d89601683611750565b9150611d9482611d53565b602082019050919050565b60006020820190508181036000830152611db881611d7c565b9050919050565b7f55736572206e6f7420666f756e64000000000000000000000000000000000000600082015250565b6000611df5600e83611750565b9150611e0082611dbf565b602082019050919050565b60006020820190508181036000830152611e2481611de8565b9050919050565b7f5573657220697320616c72656164792072656769737465726564000000000000600082015250565b6000611e61601a83611750565b9150611e6c82611e2b565b602082019050919050565b60006020820190508181036000830152611e9081611e54565b9050919050565b7f557365726e616d652073686f756c64206e6f7420626520656d70747900000000600082015250565b6000611ecd601c83611750565b9150611ed882611e97565b602082019050919050565b60006020820190508181036000830152611efc81611ec0565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302611f657fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611f28565b611f6f8683611f28565b95508019841693508086168417925050509392505050565b6000819050919050565b6000611fac611fa7611fa2846116a1565b611f87565b6116a1565b9050919050565b6000819050919050565b611fc683611f91565b611fda611fd282611fb3565b848454611f35565b825550505050565b600090565b611fef611fe2565b611ffa818484611fbd565b505050565b5b8181101561201e57612013600082611fe7565b600181019050612000565b5050565b601f8211156120635761203481611f03565b61203d84611f18565b8101602085101561204c578190505b61206061205885611f18565b830182611fff565b50505b505050565b600082821c905092915050565b600061208660001984600802612068565b1980831691505092915050565b600061209f8383612075565b9150826002028217905092915050565b6120b882611745565b67ffffffffffffffff8111156120d1576120d0611a05565b5b6120db8254611c87565b6120e6828285612022565b600060209050601f8311600181146121195760008415612107578287015190505b6121118582612093565b865550612179565b601f19841661212786611f03565b60005b8281101561214f5784890151825560018201915060208501945060208101905061212a565b8683101561216c5784890151612168601f891682612075565b8355505b6001600288020188555050505b505050505050565b6000602082019050818103600083015261219b818461179c565b905092915050565b7f55736572206973206e6f74207265676973746572656400000000000000000000600082015250565b60006121d9601683611750565b91506121e4826121a3565b602082019050919050565b60006020820190508181036000830152612208816121cc565b9050919050565b7f557365722068617320616c7265616479206c696b6564207468697320706f7374600082015250565b6000612245602083611750565b91506122508261220f565b602082019050919050565b6000602082019050818103600083015261227481612238565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006122b5826116a1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036122e7576122e661227b565b5b600182019050919050565b7f436f6d6d656e742073686f756c64206e6f7420626520656d7074790000000000600082015250565b6000612328601b83611750565b9150612333826122f2565b602082019050919050565b600060208201905081810360008301526123578161231b565b9050919050565b60006040820190508181036000830152612378818561179c565b905061238760208301846117d5565b9392505050565b7f436f6e74656e742073686f756c64206e6f7420626520656d7074790000000000600082015250565b60006123c4601b83611750565b91506123cf8261238e565b602082019050919050565b600060208201905081810360008301526123f3816123b7565b905091905056fea26469706673582212200a979f142dcd06c81e629411a7b21576337b475cc219d4f4b0349faba66dc8a564736f6c634300081c0033",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "addComment(uint256,string)": {
        "details": "Adds a comment to a post.",
        "params": {
          "_content": "The content of the comment.",
          "_postId": "The ID of the post to comment on."
        }
      },
      "createPost(string)": {
        "details": "Creates a new post.",
        "params": {
          "_content": "The content of the post."
        }
      },
      "getComment(uint256,uint256)": {
        "details": "Returns the details of a comment on a post.",
        "params": {
          "_commentId": "The ID of the comment.",
          "_postId": "The ID of the post."
        },
        "returns": {
          "commenter": "The address of the user who made the comment.",
          "content": "The content of the comment.",
          "timestamp": "The time when the comment was made."
        }
      },
      "getPost(uint256)": {
        "details": "Returns the details of a post.",
        "params": {
          "_postId": "The ID of the post."
        },
        "returns": {
          "author": "The address of the post's author.",
          "commentsCount": "The number of comments on the post.",
          "content": "The content of the post.",
          "likes": "The number of likes the post has received.",
          "timestamp": "The time when the post was created."
        }
      },
      "getPostsCount()": {
        "details": "Returns the total number of posts.",
        "returns": {
          "_0": "The total number of posts."
        }
      },
      "getUserByAddress(address)": {
        "details": "Returns the user details for a given address.",
        "params": {
          "_userAddress": "The address of the user."
        },
        "returns": {
          "_0": "The User struct for the given address."
        }
      },
      "likePost(uint256)": {
        "details": "Likes a post.",
        "params": {
          "_postId": "The ID of the post to like."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "registerUser(string)": {
        "details": "Registers a new user.",
        "params": {
          "_username": "The username chosen by the user."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 188,
        "contract": "contracts/Chainchat.sol:Chainchat",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 8,
        "contract": "contracts/Chainchat.sol:Chainchat",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 267,
        "contract": "contracts/Chainchat.sol:Chainchat",
        "label": "users",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(User)262_storage)"
      },
      {
        "astId": 298,
        "contract": "contracts/Chainchat.sol:Chainchat",
        "label": "postComments",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Comment)291_storage))"
      },
      {
        "astId": 302,
        "contract": "contracts/Chainchat.sol:Chainchat",
        "label": "postCommentsCount",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 306,
        "contract": "contracts/Chainchat.sol:Chainchat",
        "label": "posts",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_struct(Post)283_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Post)283_storage)dyn_storage": {
        "base": "t_struct(Post)283_storage",
        "encoding": "dynamic_array",
        "label": "struct Chainchat.Post[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(User)262_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Chainchat.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)262_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Comment)291_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct Chainchat.Comment))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Comment)291_storage)"
      },
      "t_mapping(t_uint256,t_struct(Comment)291_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Chainchat.Comment)",
        "numberOfBytes": "32",
        "value": "t_struct(Comment)291_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Comment)291_storage": {
        "encoding": "inplace",
        "label": "struct Chainchat.Comment",
        "members": [
          {
            "astId": 286,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "commenter",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 288,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "content",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 290,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "timestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Post)283_storage": {
        "encoding": "inplace",
        "label": "struct Chainchat.Post",
        "members": [
          {
            "astId": 270,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "author",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 272,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "content",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 274,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "timestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 276,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "likes",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 278,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "commentsCount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 282,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "likedBy",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(User)262_storage": {
        "encoding": "inplace",
        "label": "struct Chainchat.User",
        "members": [
          {
            "astId": 257,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "username",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 259,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "userAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 261,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "isRegistered",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}