{
  "address": "0x12589bD8ab5104356c10E982D77aF7c332a19EE1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "commenter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "postId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "content",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "CommentAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "content",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "image",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PostCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "liker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "postId",
          "type": "uint256"
        }
      ],
      "name": "PostLiked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sharer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "originalPostId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPostId",
          "type": "uint256"
        }
      ],
      "name": "PostShared",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "image",
          "type": "string"
        }
      ],
      "name": "ProfileImageUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "username",
          "type": "string"
        }
      ],
      "name": "UserRegistered",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_postId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_content",
          "type": "string"
        }
      ],
      "name": "addComment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ccToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commentCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_content",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_image",
          "type": "string"
        }
      ],
      "name": "createPost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "freePostsRemaining",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_postId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_commentId",
          "type": "uint256"
        }
      ],
      "name": "getComment",
      "outputs": [
        {
          "internalType": "address",
          "name": "commenter",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "content",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getFreePostsRemaining",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_postId",
          "type": "uint256"
        }
      ],
      "name": "getPost",
      "outputs": [
        {
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "content",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "image",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "likes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "commentsCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "originalPostId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPostsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "getUserByAddress",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "username",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "userAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isRegistered",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "profileImage",
              "type": "string"
            }
          ],
          "internalType": "struct Chainchat.User",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_postId",
          "type": "uint256"
        }
      ],
      "name": "likePost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "postComments",
      "outputs": [
        {
          "internalType": "address",
          "name": "commenter",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "content",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "postCommentsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "postCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "posts",
      "outputs": [
        {
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "content",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "image",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "likes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "commentsCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "originalPostId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referralBonus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "referralCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "referrers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_username",
          "type": "string"
        }
      ],
      "name": "registerUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_postCost",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_commentCost",
          "type": "uint256"
        }
      ],
      "name": "setCosts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_image",
          "type": "string"
        }
      ],
      "name": "setProfileImage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "setTokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_postId",
          "type": "uint256"
        }
      ],
      "name": "sharePost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "signupBonus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "string",
          "name": "username",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isRegistered",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "profileImage",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x149e2c92c7b45fb9b97c5d3454cb54b23283454fcf1c2e1849f43413af03838c",
  "receipt": {
    "to": null,
    "from": "0x9409C4AB1163037027c91B47893632174d46e6BA",
    "contractAddress": "0x12589bD8ab5104356c10E982D77aF7c332a19EE1",
    "transactionIndex": 0,
    "gasUsed": "3361472",
    "logsBloom": "0x
    "blockHash": "0x7f998020148738a04b992af4666c289087ca7781e6ee496a0d97b2a47cbab8b9",
    "transactionHash": "0x149e2c92c7b45fb9b97c5d3454cb54b23283454fcf1c2e1849f43413af03838c",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 7436779,
        "transactionHash": "0x149e2c92c7b45fb9b97c5d3454cb54b23283454fcf1c2e1849f43413af03838c",
        "address": "0x12589bD8ab5104356c10E982D77aF7c332a19EE1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009409c4ab1163037027c91b47893632174d46e6ba"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x7f998020148738a04b992af4666c289087ca7781e6ee496a0d97b2a47cbab8b9"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 7436779,
        "transactionHash": "0x149e2c92c7b45fb9b97c5d3454cb54b23283454fcf1c2e1849f43413af03838c",
        "address": "0x12589bD8ab5104356c10E982D77aF7c332a19EE1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000009409c4ab1163037027c91b47893632174d46e6ba",
          "0x0000000000000000000000009409c4ab1163037027c91b47893632174d46e6ba"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x7f998020148738a04b992af4666c289087ca7781e6ee496a0d97b2a47cbab8b9"
      }
    ],
    "blockNumber": 7436779,
    "cumulativeGasUsed": "3361472",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE9Df3B11B91845Db9235A70FA5eDd879FEA4E095"
  ],
  "numDeployments": 5,
  "solcInputHash": "38264d90332b299f8e33fe5a96a2b34d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"commenter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"CommentAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PostCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"}],\"name\":\"PostLiked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sharer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originalPostId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPostId\",\"type\":\"uint256\"}],\"name\":\"PostShared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"}],\"name\":\"ProfileImageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"}],\"name\":\"UserRegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_postId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_content\",\"type\":\"string\"}],\"name\":\"addComment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ccToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commentCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_content\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_image\",\"type\":\"string\"}],\"name\":\"createPost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"freePostsRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_postId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_commentId\",\"type\":\"uint256\"}],\"name\":\"getComment\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"commenter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getFreePostsRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_postId\",\"type\":\"uint256\"}],\"name\":\"getPost\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"likes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commentsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originalPostId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPostsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getUserByAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"profileImage\",\"type\":\"string\"}],\"internalType\":\"struct Chainchat.User\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_postId\",\"type\":\"uint256\"}],\"name\":\"likePost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"postComments\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"commenter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"postCommentsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"posts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"likes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commentsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originalPostId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_username\",\"type\":\"string\"}],\"name\":\"registerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_postCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_commentCost\",\"type\":\"uint256\"}],\"name\":\"setCosts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_image\",\"type\":\"string\"}],\"name\":\"setProfileImage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_postId\",\"type\":\"uint256\"}],\"name\":\"sharePost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signupBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"profileImage\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createPost(string,string)\":{\"notice\":\"Creates a new post, optionally with an image\"},\"getPost(uint256)\":{\"notice\":\"Returns post data, including new image and originalPostId fields\"},\"setProfileImage(string)\":{\"notice\":\"Sets or updates the user's profile picture\"},\"sharePost(uint256)\":{\"notice\":\"Shares an existing post\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Chainchat.sol\":\"Chainchat\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"contracts/Chainchat.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract Chainchat is ReentrancyGuard, Ownable {\\n    IERC20 public ccToken;\\n\\n    /**\\n     * @dev Struct representing a user in the dApp.\\n     * @param username The username of the user.\\n     * @param userAddress The address of the user.\\n     * @param isRegistered A boolean indicating if the user is registered.\\n     * @param profileImage The image URL or IPFS hash for the user's profile picture.\\n     */\\n    struct User {\\n        string username;\\n        address userAddress;\\n        bool isRegistered;\\n        string profileImage; // New field: profile picture\\n    }\\n\\n    mapping(address => User) public users;\\n\\n    /**\\n     * @dev Struct representing a post in the dApp.\\n     * @param author The address of the user who created the post.\\n     * @param content The content of the post.\\n     * @param image The optional image URL or IPFS hash attached to the post.\\n     * @param timestamp The time when the post was created.\\n     * @param likes The number of likes the post has received.\\n     * @param commentsCount The number of comments on the post.\\n     * @param originalPostId The ID of the post being shared (0 for original posts).\\n     * @param likedBy A mapping to track if a user has liked the post.\\n     */\\n    struct Post {\\n        address author;\\n        string content;\\n        string image; // New field: image URL or IPFS hash\\n        uint256 timestamp;\\n        uint256 likes;\\n        uint256 commentsCount;\\n        uint256 originalPostId; // New field: shared post reference\\n        mapping(address => bool) likedBy;\\n    }\\n\\n    struct Comment {\\n        address commenter;\\n        string content;\\n        uint256 timestamp;\\n    }\\n\\n    // Token economics\\n    uint256 public postCost = 10 * 10 ** 18; // 10 CCT\\n    uint256 public commentCost = 5 * 10 ** 18; // 5 CCT\\n    uint256 public signupBonus = 100 * 10 ** 18; // 100 CCT\\n    uint256 public referralBonus = 50 * 10 ** 18; // 50 CCT\\n\\n    // Free post allowance\\n    uint256 constant FREE_POST_ALLOWANCE = 5;\\n    mapping(address => uint256) public freePostsRemaining;\\n\\n    // User referrals\\n    mapping(address => address) public referrers;\\n    mapping(address => uint256) public referralCount;\\n\\n    mapping(uint256 => mapping(uint256 => Comment)) public postComments;\\n    mapping(uint256 => uint256) public postCommentsCount;\\n\\n    Post[] public posts;\\n\\n    event UserRegistered(address indexed userAddress, string username);\\n    event ProfileImageUpdated(address indexed userAddress, string image);\\n    event PostCreated(\\n        address indexed author,\\n        string content,\\n        string image,\\n        uint256 timestamp\\n    );\\n    event PostShared(\\n        address indexed sharer,\\n        uint256 originalPostId,\\n        uint256 newPostId\\n    );\\n    event PostLiked(address indexed liker, uint256 indexed postId);\\n    event CommentAdded(\\n        address indexed commenter,\\n        uint256 indexed postId,\\n        string content,\\n        uint256 timestamp\\n    );\\n\\n    modifier onlyRegisteredUser() {\\n        require(users[msg.sender].isRegistered, \\\"User is not registered\\\");\\n        _;\\n    }\\n\\n    constructor(address _tokenAddress) Ownable(msg.sender) {\\n        ccToken = IERC20(_tokenAddress);\\n        transferOwnership(msg.sender);\\n    }\\n\\n    function registerUser(string memory _username) external {\\n        require(!users[msg.sender].isRegistered, \\\"User is already registered\\\");\\n        require(bytes(_username).length > 0, \\\"Username should not be empty\\\");\\n\\n        users[msg.sender] = User({\\n            username: _username,\\n            userAddress: msg.sender,\\n            isRegistered: true,\\n            profileImage: \\\"\\\"\\n        });\\n\\n        // Give free post allowance\\n        freePostsRemaining[msg.sender] = FREE_POST_ALLOWANCE;\\n        // Standard signup bonus\\n        ccToken.transfer(msg.sender, signupBonus);\\n        emit UserRegistered(msg.sender, _username);\\n    }\\n\\n    /// @notice Sets or updates the user's profile picture\\n    function setProfileImage(string memory _image) external onlyRegisteredUser {\\n        users[msg.sender].profileImage = _image;\\n        emit ProfileImageUpdated(msg.sender, _image);\\n    }\\n\\n    function getUserByAddress(\\n        address _userAddress\\n    ) external view returns (User memory) {\\n        require(users[_userAddress].isRegistered, \\\"User not found\\\");\\n        return users[_userAddress];\\n    }\\n\\n    /// @notice Creates a new post, optionally with an image\\n    function createPost(\\n        string memory _content,\\n        string memory _image\\n    ) external onlyRegisteredUser {\\n        if (freePostsRemaining[msg.sender] > 0) {\\n            freePostsRemaining[msg.sender]--;\\n        } else {\\n            require(\\n                ccToken.transferFrom(msg.sender, address(this), postCost),\\n                \\\"Payment failed\\\"\\n            );\\n        }\\n\\n        require(bytes(_content).length > 0, \\\"Content should not be empty\\\");\\n\\n        Post storage newPost = posts.push();\\n        newPost.author = msg.sender;\\n        newPost.content = _content;\\n        newPost.image = _image;\\n        newPost.timestamp = block.timestamp;\\n        newPost.originalPostId = 0;\\n\\n        emit PostCreated(msg.sender, _content, _image, block.timestamp);\\n    }\\n\\n    /// @notice Shares an existing post\\n    function sharePost(uint256 _postId) external onlyRegisteredUser {\\n        require(_postId < posts.length, \\\"Original post does not exist\\\");\\n\\n        Post storage sharedPost = posts.push();\\n        sharedPost.author = msg.sender;\\n        sharedPost.content = posts[_postId].content;\\n        sharedPost.image = posts[_postId].image;\\n        sharedPost.timestamp = block.timestamp;\\n        sharedPost.originalPostId = _postId;\\n\\n        emit PostShared(msg.sender, _postId, posts.length - 1);\\n    }\\n\\n    function likePost(\\n        uint256 _postId\\n    ) external onlyRegisteredUser nonReentrant {\\n        require(_postId < posts.length, \\\"Post does not exist\\\");\\n\\n        Post storage post = posts[_postId];\\n        require(!post.likedBy[msg.sender], \\\"User has already liked this post\\\");\\n\\n        post.likes++;\\n        post.likedBy[msg.sender] = true;\\n\\n        // Send 1 CCT to the post creator\\n        ccToken.transfer(post.author, 1 * 10 ** 18);\\n\\n        emit PostLiked(msg.sender, _postId);\\n    }\\n\\n    function addComment(\\n        uint256 _postId,\\n        string memory _content\\n    ) external onlyRegisteredUser nonReentrant {\\n        require(\\n            ccToken.transferFrom(msg.sender, address(this), commentCost),\\n            \\\"Payment failed\\\"\\n        );\\n        require(_postId < posts.length, \\\"Post does not exist\\\");\\n        require(bytes(_content).length > 0, \\\"Comment should not be empty\\\");\\n\\n        uint256 commentId = postCommentsCount[_postId];\\n        postComments[_postId][commentId] = Comment({\\n            commenter: msg.sender,\\n            content: _content,\\n            timestamp: block.timestamp\\n        });\\n\\n        postCommentsCount[_postId]++;\\n        posts[_postId].commentsCount++;\\n\\n        emit CommentAdded(msg.sender, _postId, _content, block.timestamp);\\n    }\\n\\n    function getPostsCount() external view returns (uint256) {\\n        return posts.length;\\n    }\\n\\n    /// @notice Returns post data, including new image and originalPostId fields\\n    function getPost(\\n        uint256 _postId\\n    )\\n        external\\n        view\\n        returns (\\n            address author,\\n            string memory content,\\n            string memory image,\\n            uint256 timestamp,\\n            uint256 likes,\\n            uint256 commentsCount,\\n            uint256 originalPostId\\n        )\\n    {\\n        require(_postId < posts.length, \\\"Post does not exist\\\");\\n        Post storage post = posts[_postId];\\n        return (\\n            post.author,\\n            post.content,\\n            post.image,\\n            post.timestamp,\\n            post.likes,\\n            post.commentsCount,\\n            post.originalPostId\\n        );\\n    }\\n\\n    function getComment(\\n        uint256 _postId,\\n        uint256 _commentId\\n    )\\n        external\\n        view\\n        returns (address commenter, string memory content, uint256 timestamp)\\n    {\\n        require(_postId < posts.length, \\\"Post does not exist\\\");\\n        require(\\n            _commentId < postCommentsCount[_postId],\\n            \\\"Comment does not exist\\\"\\n        );\\n\\n        Comment memory comment = postComments[_postId][_commentId];\\n        return (comment.commenter, comment.content, comment.timestamp);\\n    }\\n\\n    function setTokenAddress(address _tokenAddress) external onlyOwner {\\n        ccToken = IERC20(_tokenAddress);\\n    }\\n\\n    function setCosts(\\n        uint256 _postCost,\\n        uint256 _commentCost\\n    ) external onlyOwner {\\n        postCost = _postCost;\\n        commentCost = _commentCost;\\n    }\\n\\n    function withdrawTokens() external onlyOwner {\\n        ccToken.transfer(owner(), ccToken.balanceOf(address(this)));\\n    }\\n\\n    function getFreePostsRemaining(\\n        address _user\\n    ) external view returns (uint256) {\\n        return freePostsRemaining[_user];\\n    }\\n}\\n\",\"keccak256\":\"0xbba668e6e9cb7aa0b02deb1bd053c28da6621cced394da6e70fa4185f4eb3e5c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052678ac7230489e80000600455674563918244f4000060055568056bc75e2d631000006006556802b5e3af16b188000060075534801561004257600080fd5b50604051613d0c380380613d0c833981810160405281019061006491906103cb565b336001600081905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036100df5760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016100d69190610407565b60405180910390fd5b6100ee8161014560201b60201c565b5080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061013f3361020b60201b60201c565b50610422565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61021961029d60201b60201c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361028b5760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016102829190610407565b60405180910390fd5b61029a8161014560201b60201c565b50565b6102ab61033660201b60201c565b73ffffffffffffffffffffffffffffffffffffffff166102cf61033e60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1614610334576102f861033660201b60201c565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161032b9190610407565b60405180910390fd5b565b600033905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103988261036d565b9050919050565b6103a88161038d565b81146103b357600080fd5b50565b6000815190506103c58161039f565b92915050565b6000602082840312156103e1576103e0610368565b5b60006103ef848285016103b6565b91505092915050565b6104018161038d565b82525050565b600060208201905061041c60008301846103f8565b92915050565b6138db806104316000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c8063725009d311610104578063ce7842f5116100a2578063df7969ad11610071578063df7969ad14610555578063f2fde38b14610585578063f5d76320146105a1578063f70d205c146105bd576101cf565b8063ce7842f5146104bb578063d82d72bf146104d9578063db58990714610509578063db74559b14610525576101cf565b80638da5cb5b116100de5780638da5cb5b14610430578063a87430ba1461044e578063aa7e568314610481578063acb315851461049d576101cf565b8063725009d3146103ec57806383624882146104085780638d8f2adb14610426576101cf565b80635193c94c1161017157806369c212f61161014b57806369c212f6146103785780636aa72383146103a8578063704f1b94146103c6578063715018a6146103e2576101cf565b80635193c94c1461030a5780635c7995b41461033c57806367cb52d81461035a576101cf565b8063392338f5116101ad578063392338f51461025657806340731c241461027257806348892753146102a85780634a3b68cc146102da576101cf565b80630b1e7f83146101d457806323c4f9631461020a57806326a4e8d21461023a575b600080fd5b6101ee60048036038101906101e99190612633565b6105d9565b6040516102019796959493929190612740565b60405180910390f35b610224600480360381019061021f91906127e9565b61075b565b6040516102319190612816565b60405180910390f35b610254600480360381019061024f91906127e9565b6107a4565b005b610270600480360381019061026b9190612966565b6107f0565b005b61028c60048036038101906102879190612633565b610b3e565b60405161029f9796959493929190612740565b60405180910390f35b6102c260048036038101906102bd91906129de565b610d29565b6040516102d193929190612a1e565b60405180910390f35b6102f460048036038101906102ef91906127e9565b610f0d565b6040516103019190612a5c565b60405180910390f35b610324600480360381019061031f91906129de565b610f40565b60405161033393929190612a1e565b60405180910390f35b61034461101f565b6040516103519190612ad6565b60405180910390f35b610362611045565b60405161036f9190612816565b60405180910390f35b610392600480360381019061038d91906127e9565b61104b565b60405161039f9190612bcf565b60405180910390f35b6103b06112c8565b6040516103bd9190612816565b60405180910390f35b6103e060048036038101906103db9190612bf1565b6112ce565b005b6103ea6115f9565b005b61040660048036038101906104019190612633565b61160d565b005b610410611931565b60405161041d9190612816565b60405180910390f35b61042e61193e565b005b610438611a8b565b6040516104459190612a5c565b60405180910390f35b610468600480360381019061046391906127e9565b611ab5565b6040516104789493929190612c49565b60405180910390f35b61049b60048036038101906104969190612c9c565b611c22565b005b6104a5611fc0565b6040516104b29190612816565b60405180910390f35b6104c3611fc6565b6040516104d09190612816565b60405180910390f35b6104f360048036038101906104ee9190612633565b611fcc565b6040516105009190612816565b60405180910390f35b610523600480360381019061051e91906129de565b611fe4565b005b61053f600480360381019061053a91906127e9565b611ffe565b60405161054c9190612816565b60405180910390f35b61056f600480360381019061056a91906127e9565b612016565b60405161057c9190612816565b60405180910390f35b61059f600480360381019061059a91906127e9565b61202e565b005b6105bb60048036038101906105b69190612633565b6120b4565b005b6105d760048036038101906105d29190612bf1565b6122d4565b005b600d81815481106105e957600080fd5b90600052602060002090600802016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600101805461063290612d27565b80601f016020809104026020016040519081016040528092919081815260200182805461065e90612d27565b80156106ab5780601f10610680576101008083540402835291602001916106ab565b820191906000526020600020905b81548152906001019060200180831161068e57829003601f168201915b5050505050908060020180546106c090612d27565b80601f01602080910402602001604051908101604052809291908181526020018280546106ec90612d27565b80156107395780601f1061070e57610100808354040283529160200191610739565b820191906000526020600020905b81548152906001019060200180831161071c57829003601f168201915b5050505050908060030154908060040154908060050154908060060154905087565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6107ac612404565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160149054906101000a900460ff1661087f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087690612da4565b60405180910390fd5b6000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054111561092157600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919061091790612df3565b9190505550610a05565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33306004546040518463ffffffff1660e01b815260040161098293929190612e1c565b6020604051808303816000875af11580156109a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c59190612e7f565b610a04576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fb90612ef8565b60405180910390fd5b5b6000825111610a49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4090612f64565b60405180910390fd5b6000600d6001816001815401808255809150500390600052602060002090600802019050338160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082816001019081610ac19190613126565b5081816002019081610ad39190613126565b50428160030181905550600081600601819055503373ffffffffffffffffffffffffffffffffffffffff167f4dc899ab633bbd3c97004820698910906a6748451e00b59a3e011358dc2f9fb5848442604051610b31939291906131f8565b60405180910390a2505050565b6000606080600080600080600d805490508810610b90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8790613289565b60405180910390fd5b6000600d8981548110610ba657610ba56132a9565b5b906000526020600020906008020190508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600101826002018360030154846004015485600501548660060154858054610c0390612d27565b80601f0160208091040260200160405190810160405280929190818152602001828054610c2f90612d27565b8015610c7c5780601f10610c5157610100808354040283529160200191610c7c565b820191906000526020600020905b815481529060010190602001808311610c5f57829003601f168201915b50505050509550848054610c8f90612d27565b80601f0160208091040260200160405190810160405280929190818152602001828054610cbb90612d27565b8015610d085780601f10610cdd57610100808354040283529160200191610d08565b820191906000526020600020905b815481529060010190602001808311610ceb57829003601f168201915b50505050509450975097509750975097509750975050919395979092949650565b600060606000600d805490508510610d76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6d90613289565b60405180910390fd5b600c6000868152602001908152602001600020548410610dcb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc290613324565b60405180910390fd5b6000600b600087815260200190815260200160002060008681526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054610e6290612d27565b80601f0160208091040260200160405190810160405280929190818152602001828054610e8e90612d27565b8015610edb5780601f10610eb057610100808354040283529160200191610edb565b820191906000526020600020905b815481529060010190602001808311610ebe57829003601f168201915b505050505081526020016002820154815250509050806000015181602001518260400151935093509350509250925092565b60096020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001018054610f9690612d27565b80601f0160208091040260200160405190810160405280929190818152602001828054610fc290612d27565b801561100f5780601f10610fe45761010080835404028352916020019161100f565b820191906000526020600020905b815481529060010190602001808311610ff257829003601f168201915b5050505050908060020154905083565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60065481565b6110536125a9565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160149054906101000a900460ff166110e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d990613390565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180608001604052908160008201805461113c90612d27565b80601f016020809104026020016040519081016040528092919081815260200182805461116890612d27565b80156111b55780601f1061118a576101008083540402835291602001916111b5565b820191906000526020600020905b81548152906001019060200180831161119857829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900460ff1615151515815260200160028201805461123f90612d27565b80601f016020809104026020016040519081016040528092919081815260200182805461126b90612d27565b80156112b85780601f1061128d576101008083540402835291602001916112b8565b820191906000526020600020905b81548152906001019060200180831161129b57829003601f168201915b5050505050815250509050919050565b60055481565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160149054906101000a900460ff161561135e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611355906133fc565b60405180910390fd5b60008151116113a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139990613468565b60405180910390fd5b60405180608001604052808281526020013373ffffffffffffffffffffffffffffffffffffffff16815260200160011515815260200160405180602001604052806000815250815250600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001908161143f9190613126565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff02191690831515021790555060608201518160020190816114bc9190613126565b509050506005600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb336006546040518363ffffffff1660e01b8152600401611564929190613488565b6020604051808303816000875af1158015611583573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a79190612e7f565b503373ffffffffffffffffffffffffffffffffffffffff167f48cac28ad4dc618e15f4c2dd5e97751182f166de97b25618318b2112aa951a2f826040516115ee91906134b1565b60405180910390a250565b611601612404565b61160b600061248b565b565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160149054906101000a900460ff1661169c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161169390612da4565b60405180910390fd5b6116a4612551565b600d8054905081106116eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116e290613289565b60405180910390fd5b6000600d8281548110611701576117006132a9565b5b906000526020600020906008020190508060070160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156117a0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117979061351f565b60405180910390fd5b8060040160008154809291906117b59061353f565b919050555060018160070160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16670de0b6b3a76400006040518363ffffffff1660e01b815260040161189d9291906135c2565b6020604051808303816000875af11580156118bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e09190612e7f565b50813373ffffffffffffffffffffffffffffffffffffffff167f62500381f39eb6f48b6e6f104021ceeaca9e5354918dc17b4a15bf87c5f5d28b60405160405180910390a35061192e612597565b50565b6000600d80549050905090565b611946612404565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb61198c611a8b565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016119e79190612a5c565b602060405180830381865afa158015611a04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a289190613600565b6040518363ffffffff1660e01b8152600401611a45929190613488565b6020604051808303816000875af1158015611a64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a889190612e7f565b50565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6003602052806000526040600020600091509050806000018054611ad890612d27565b80601f0160208091040260200160405190810160405280929190818152602001828054611b0490612d27565b8015611b515780601f10611b2657610100808354040283529160200191611b51565b820191906000526020600020905b815481529060010190602001808311611b3457829003601f168201915b5050505050908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160149054906101000a900460ff1690806002018054611b9f90612d27565b80601f0160208091040260200160405190810160405280929190818152602001828054611bcb90612d27565b8015611c185780601f10611bed57610100808354040283529160200191611c18565b820191906000526020600020905b815481529060010190602001808311611bfb57829003601f168201915b5050505050905084565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160149054906101000a900460ff16611cb1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ca890612da4565b60405180910390fd5b611cb9612551565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33306005546040518463ffffffff1660e01b8152600401611d1a93929190612e1c565b6020604051808303816000875af1158015611d39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5d9190612e7f565b611d9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d9390612ef8565b60405180910390fd5b600d805490508210611de3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dda90613289565b60405180910390fd5b6000815111611e27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1e90613679565b60405180910390fd5b6000600c600084815260200190815260200160002054905060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200183815260200142815250600b6000858152602001908152602001600020600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019081611ef09190613126565b5060408201518160020155905050600c60008481526020019081526020016000206000815480929190611f229061353f565b9190505550600d8381548110611f3b57611f3a6132a9565b5b90600052602060002090600802016005016000815480929190611f5d9061353f565b9190505550823373ffffffffffffffffffffffffffffffffffffffff167fdb68d60a2d5659f0528e369fe9a8cfdbec13beb23609aa9a7a5c2a2d973117e48442604051611fab929190613699565b60405180910390a350611fbc612597565b5050565b60045481565b60075481565b600c6020528060005260406000206000915090505481565b611fec612404565b81600481905550806005819055505050565b600a6020528060005260406000206000915090505481565b60086020528060005260406000206000915090505481565b612036612404565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036120a85760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161209f9190612a5c565b60405180910390fd5b6120b18161248b565b50565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160149054906101000a900460ff16612143576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161213a90612da4565b60405180910390fd5b600d80549050811061218a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161218190613715565b60405180910390fd5b6000600d6001816001815401808255809150500390600052602060002090600802019050338160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600d8281548110612205576122046132a9565b5b90600052602060002090600802016001018160010190816122269190613760565b50600d828154811061223b5761223a6132a9565b5b906000526020600020906008020160020181600201908161225c9190613760565b504281600301819055508181600601819055503373ffffffffffffffffffffffffffffffffffffffff167f1c03620db49e9abd75c892c4d5777b171bbcba631506a2fd6078694a4455808c836001600d805490506122ba9190613848565b6040516122c892919061387c565b60405180910390a25050565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160149054906101000a900460ff16612363576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161235a90612da4565b60405180910390fd5b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020190816123b29190613126565b503373ffffffffffffffffffffffffffffffffffffffff167f3e22697b8c73d3349d4c96c42842b506a4f025921d2a1006eab4e8b3edde50a9826040516123f991906134b1565b60405180910390a250565b61240c6125a1565b73ffffffffffffffffffffffffffffffffffffffff1661242a611a8b565b73ffffffffffffffffffffffffffffffffffffffff16146124895761244d6125a1565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016124809190612a5c565b60405180910390fd5b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60026000540361258d576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600081905550565b6001600081905550565b600033905090565b604051806080016040528060608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600015158152602001606081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b612610816125fd565b811461261b57600080fd5b50565b60008135905061262d81612607565b92915050565b600060208284031215612649576126486125f3565b5b60006126578482850161261e565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061268b82612660565b9050919050565b61269b81612680565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156126db5780820151818401526020810190506126c0565b60008484015250505050565b6000601f19601f8301169050919050565b6000612703826126a1565b61270d81856126ac565b935061271d8185602086016126bd565b612726816126e7565b840191505092915050565b61273a816125fd565b82525050565b600060e082019050612755600083018a612692565b818103602083015261276781896126f8565b9050818103604083015261277b81886126f8565b905061278a6060830187612731565b6127976080830186612731565b6127a460a0830185612731565b6127b160c0830184612731565b98975050505050505050565b6127c681612680565b81146127d157600080fd5b50565b6000813590506127e3816127bd565b92915050565b6000602082840312156127ff576127fe6125f3565b5b600061280d848285016127d4565b91505092915050565b600060208201905061282b6000830184612731565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612873826126e7565b810181811067ffffffffffffffff821117156128925761289161283b565b5b80604052505050565b60006128a56125e9565b90506128b1828261286a565b919050565b600067ffffffffffffffff8211156128d1576128d061283b565b5b6128da826126e7565b9050602081019050919050565b82818337600083830152505050565b6000612909612904846128b6565b61289b565b90508281526020810184848401111561292557612924612836565b5b6129308482856128e7565b509392505050565b600082601f83011261294d5761294c612831565b5b813561295d8482602086016128f6565b91505092915050565b6000806040838503121561297d5761297c6125f3565b5b600083013567ffffffffffffffff81111561299b5761299a6125f8565b5b6129a785828601612938565b925050602083013567ffffffffffffffff8111156129c8576129c76125f8565b5b6129d485828601612938565b9150509250929050565b600080604083850312156129f5576129f46125f3565b5b6000612a038582860161261e565b9250506020612a148582860161261e565b9150509250929050565b6000606082019050612a336000830186612692565b8181036020830152612a4581856126f8565b9050612a546040830184612731565b949350505050565b6000602082019050612a716000830184612692565b92915050565b6000819050919050565b6000612a9c612a97612a9284612660565b612a77565b612660565b9050919050565b6000612aae82612a81565b9050919050565b6000612ac082612aa3565b9050919050565b612ad081612ab5565b82525050565b6000602082019050612aeb6000830184612ac7565b92915050565b600082825260208201905092915050565b6000612b0d826126a1565b612b178185612af1565b9350612b278185602086016126bd565b612b30816126e7565b840191505092915050565b612b4481612680565b82525050565b60008115159050919050565b612b5f81612b4a565b82525050565b60006080830160008301518482036000860152612b828282612b02565b9150506020830151612b976020860182612b3b565b506040830151612baa6040860182612b56565b5060608301518482036060860152612bc28282612b02565b9150508091505092915050565b60006020820190508181036000830152612be98184612b65565b905092915050565b600060208284031215612c0757612c066125f3565b5b600082013567ffffffffffffffff811115612c2557612c246125f8565b5b612c3184828501612938565b91505092915050565b612c4381612b4a565b82525050565b60006080820190508181036000830152612c6381876126f8565b9050612c726020830186612692565b612c7f6040830185612c3a565b8181036060830152612c9181846126f8565b905095945050505050565b60008060408385031215612cb357612cb26125f3565b5b6000612cc18582860161261e565b925050602083013567ffffffffffffffff811115612ce257612ce16125f8565b5b612cee85828601612938565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612d3f57607f821691505b602082108103612d5257612d51612cf8565b5b50919050565b7f55736572206973206e6f74207265676973746572656400000000000000000000600082015250565b6000612d8e6016836126ac565b9150612d9982612d58565b602082019050919050565b60006020820190508181036000830152612dbd81612d81565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612dfe826125fd565b915060008203612e1157612e10612dc4565b5b600182039050919050565b6000606082019050612e316000830186612692565b612e3e6020830185612692565b612e4b6040830184612731565b949350505050565b612e5c81612b4a565b8114612e6757600080fd5b50565b600081519050612e7981612e53565b92915050565b600060208284031215612e9557612e946125f3565b5b6000612ea384828501612e6a565b91505092915050565b7f5061796d656e74206661696c6564000000000000000000000000000000000000600082015250565b6000612ee2600e836126ac565b9150612eed82612eac565b602082019050919050565b60006020820190508181036000830152612f1181612ed5565b9050919050565b7f436f6e74656e742073686f756c64206e6f7420626520656d7074790000000000600082015250565b6000612f4e601b836126ac565b9150612f5982612f18565b602082019050919050565b60006020820190508181036000830152612f7d81612f41565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612fe67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612fa9565b612ff08683612fa9565b95508019841693508086168417925050509392505050565b600061302361301e613019846125fd565b612a77565b6125fd565b9050919050565b6000819050919050565b61303d83613008565b6130516130498261302a565b848454612fb6565b825550505050565b600090565b613066613059565b613071818484613034565b505050565b5b818110156130955761308a60008261305e565b600181019050613077565b5050565b601f8211156130da576130ab81612f84565b6130b484612f99565b810160208510156130c3578190505b6130d76130cf85612f99565b830182613076565b50505b505050565b600082821c905092915050565b60006130fd600019846008026130df565b1980831691505092915050565b600061311683836130ec565b9150826002028217905092915050565b61312f826126a1565b67ffffffffffffffff8111156131485761314761283b565b5b6131528254612d27565b61315d828285613099565b600060209050601f831160018114613190576000841561317e578287015190505b613188858261310a565b8655506131f0565b601f19841661319e86612f84565b60005b828110156131c6578489015182556001820191506020850194506020810190506131a1565b868310156131e357848901516131df601f8916826130ec565b8355505b6001600288020188555050505b505050505050565b6000606082019050818103600083015261321281866126f8565b9050818103602083015261322681856126f8565b90506132356040830184612731565b949350505050565b7f506f737420646f6573206e6f7420657869737400000000000000000000000000600082015250565b60006132736013836126ac565b915061327e8261323d565b602082019050919050565b600060208201905081810360008301526132a281613266565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f436f6d6d656e7420646f6573206e6f7420657869737400000000000000000000600082015250565b600061330e6016836126ac565b9150613319826132d8565b602082019050919050565b6000602082019050818103600083015261333d81613301565b9050919050565b7f55736572206e6f7420666f756e64000000000000000000000000000000000000600082015250565b600061337a600e836126ac565b915061338582613344565b602082019050919050565b600060208201905081810360008301526133a98161336d565b9050919050565b7f5573657220697320616c72656164792072656769737465726564000000000000600082015250565b60006133e6601a836126ac565b91506133f1826133b0565b602082019050919050565b60006020820190508181036000830152613415816133d9565b9050919050565b7f557365726e616d652073686f756c64206e6f7420626520656d70747900000000600082015250565b6000613452601c836126ac565b915061345d8261341c565b602082019050919050565b6000602082019050818103600083015261348181613445565b9050919050565b600060408201905061349d6000830185612692565b6134aa6020830184612731565b9392505050565b600060208201905081810360008301526134cb81846126f8565b905092915050565b7f557365722068617320616c7265616479206c696b6564207468697320706f7374600082015250565b60006135096020836126ac565b9150613514826134d3565b602082019050919050565b60006020820190508181036000830152613538816134fc565b9050919050565b600061354a826125fd565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361357c5761357b612dc4565b5b600182019050919050565b6000819050919050565b60006135ac6135a76135a284613587565b612a77565b6125fd565b9050919050565b6135bc81613591565b82525050565b60006040820190506135d76000830185612692565b6135e460208301846135b3565b9392505050565b6000815190506135fa81612607565b92915050565b600060208284031215613616576136156125f3565b5b6000613624848285016135eb565b91505092915050565b7f436f6d6d656e742073686f756c64206e6f7420626520656d7074790000000000600082015250565b6000613663601b836126ac565b915061366e8261362d565b602082019050919050565b6000602082019050818103600083015261369281613656565b9050919050565b600060408201905081810360008301526136b381856126f8565b90506136c26020830184612731565b9392505050565b7f4f726967696e616c20706f737420646f6573206e6f7420657869737400000000600082015250565b60006136ff601c836126ac565b915061370a826136c9565b602082019050919050565b6000602082019050818103600083015261372e816136f2565b9050919050565b60008154905061374481612d27565b9050919050565b60008190508160005260206000209050919050565b81810361376e575050613846565b61377782613735565b67ffffffffffffffff8111156137905761378f61283b565b5b61379a8254612d27565b6137a5828285613099565b6000601f8311600181146137d457600084156137c2578287015490505b6137cc858261310a565b86555061383f565b601f1984166137e28761374b565b96506137ed86612f84565b60005b82811015613815578489015482556001820191506001850194506020810190506137f0565b86831015613832578489015461382e601f8916826130ec565b8355505b6001600288020188555050505b5050505050505b565b6000613853826125fd565b915061385e836125fd565b925082820390508181111561387657613875612dc4565b5b92915050565b60006040820190506138916000830185612731565b61389e6020830184612731565b939250505056fea26469706673582212208126d44e20dae15a156ca1cd76b6b7cf4739a4d458ee09e030c080cfed64ab1564736f6c634300081c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c8063725009d311610104578063ce7842f5116100a2578063df7969ad11610071578063df7969ad14610555578063f2fde38b14610585578063f5d76320146105a1578063f70d205c146105bd576101cf565b8063ce7842f5146104bb578063d82d72bf146104d9578063db58990714610509578063db74559b14610525576101cf565b80638da5cb5b116100de5780638da5cb5b14610430578063a87430ba1461044e578063aa7e568314610481578063acb315851461049d576101cf565b8063725009d3146103ec57806383624882146104085780638d8f2adb14610426576101cf565b80635193c94c1161017157806369c212f61161014b57806369c212f6146103785780636aa72383146103a8578063704f1b94146103c6578063715018a6146103e2576101cf565b80635193c94c1461030a5780635c7995b41461033c57806367cb52d81461035a576101cf565b8063392338f5116101ad578063392338f51461025657806340731c241461027257806348892753146102a85780634a3b68cc146102da576101cf565b80630b1e7f83146101d457806323c4f9631461020a57806326a4e8d21461023a575b600080fd5b6101ee60048036038101906101e99190612633565b6105d9565b6040516102019796959493929190612740565b60405180910390f35b610224600480360381019061021f91906127e9565b61075b565b6040516102319190612816565b60405180910390f35b610254600480360381019061024f91906127e9565b6107a4565b005b610270600480360381019061026b9190612966565b6107f0565b005b61028c60048036038101906102879190612633565b610b3e565b60405161029f9796959493929190612740565b60405180910390f35b6102c260048036038101906102bd91906129de565b610d29565b6040516102d193929190612a1e565b60405180910390f35b6102f460048036038101906102ef91906127e9565b610f0d565b6040516103019190612a5c565b60405180910390f35b610324600480360381019061031f91906129de565b610f40565b60405161033393929190612a1e565b60405180910390f35b61034461101f565b6040516103519190612ad6565b60405180910390f35b610362611045565b60405161036f9190612816565b60405180910390f35b610392600480360381019061038d91906127e9565b61104b565b60405161039f9190612bcf565b60405180910390f35b6103b06112c8565b6040516103bd9190612816565b60405180910390f35b6103e060048036038101906103db9190612bf1565b6112ce565b005b6103ea6115f9565b005b61040660048036038101906104019190612633565b61160d565b005b610410611931565b60405161041d9190612816565b60405180910390f35b61042e61193e565b005b610438611a8b565b6040516104459190612a5c565b60405180910390f35b610468600480360381019061046391906127e9565b611ab5565b6040516104789493929190612c49565b60405180910390f35b61049b60048036038101906104969190612c9c565b611c22565b005b6104a5611fc0565b6040516104b29190612816565b60405180910390f35b6104c3611fc6565b6040516104d09190612816565b60405180910390f35b6104f360048036038101906104ee9190612633565b611fcc565b6040516105009190612816565b60405180910390f35b610523600480360381019061051e91906129de565b611fe4565b005b61053f600480360381019061053a91906127e9565b611ffe565b60405161054c9190612816565b60405180910390f35b61056f600480360381019061056a91906127e9565b612016565b60405161057c9190612816565b60405180910390f35b61059f600480360381019061059a91906127e9565b61202e565b005b6105bb60048036038101906105b69190612633565b6120b4565b005b6105d760048036038101906105d29190612bf1565b6122d4565b005b600d81815481106105e957600080fd5b90600052602060002090600802016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600101805461063290612d27565b80601f016020809104026020016040519081016040528092919081815260200182805461065e90612d27565b80156106ab5780601f10610680576101008083540402835291602001916106ab565b820191906000526020600020905b81548152906001019060200180831161068e57829003601f168201915b5050505050908060020180546106c090612d27565b80601f01602080910402602001604051908101604052809291908181526020018280546106ec90612d27565b80156107395780601f1061070e57610100808354040283529160200191610739565b820191906000526020600020905b81548152906001019060200180831161071c57829003601f168201915b5050505050908060030154908060040154908060050154908060060154905087565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6107ac612404565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160149054906101000a900460ff1661087f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087690612da4565b60405180910390fd5b6000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054111561092157600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919061091790612df3565b9190505550610a05565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33306004546040518463ffffffff1660e01b815260040161098293929190612e1c565b6020604051808303816000875af11580156109a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c59190612e7f565b610a04576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fb90612ef8565b60405180910390fd5b5b6000825111610a49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4090612f64565b60405180910390fd5b6000600d6001816001815401808255809150500390600052602060002090600802019050338160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082816001019081610ac19190613126565b5081816002019081610ad39190613126565b50428160030181905550600081600601819055503373ffffffffffffffffffffffffffffffffffffffff167f4dc899ab633bbd3c97004820698910906a6748451e00b59a3e011358dc2f9fb5848442604051610b31939291906131f8565b60405180910390a2505050565b6000606080600080600080600d805490508810610b90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8790613289565b60405180910390fd5b6000600d8981548110610ba657610ba56132a9565b5b906000526020600020906008020190508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600101826002018360030154846004015485600501548660060154858054610c0390612d27565b80601f0160208091040260200160405190810160405280929190818152602001828054610c2f90612d27565b8015610c7c5780601f10610c5157610100808354040283529160200191610c7c565b820191906000526020600020905b815481529060010190602001808311610c5f57829003601f168201915b50505050509550848054610c8f90612d27565b80601f0160208091040260200160405190810160405280929190818152602001828054610cbb90612d27565b8015610d085780601f10610cdd57610100808354040283529160200191610d08565b820191906000526020600020905b815481529060010190602001808311610ceb57829003601f168201915b50505050509450975097509750975097509750975050919395979092949650565b600060606000600d805490508510610d76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6d90613289565b60405180910390fd5b600c6000868152602001908152602001600020548410610dcb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc290613324565b60405180910390fd5b6000600b600087815260200190815260200160002060008681526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054610e6290612d27565b80601f0160208091040260200160405190810160405280929190818152602001828054610e8e90612d27565b8015610edb5780601f10610eb057610100808354040283529160200191610edb565b820191906000526020600020905b815481529060010190602001808311610ebe57829003601f168201915b505050505081526020016002820154815250509050806000015181602001518260400151935093509350509250925092565b60096020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001018054610f9690612d27565b80601f0160208091040260200160405190810160405280929190818152602001828054610fc290612d27565b801561100f5780601f10610fe45761010080835404028352916020019161100f565b820191906000526020600020905b815481529060010190602001808311610ff257829003601f168201915b5050505050908060020154905083565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60065481565b6110536125a9565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160149054906101000a900460ff166110e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d990613390565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180608001604052908160008201805461113c90612d27565b80601f016020809104026020016040519081016040528092919081815260200182805461116890612d27565b80156111b55780601f1061118a576101008083540402835291602001916111b5565b820191906000526020600020905b81548152906001019060200180831161119857829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900460ff1615151515815260200160028201805461123f90612d27565b80601f016020809104026020016040519081016040528092919081815260200182805461126b90612d27565b80156112b85780601f1061128d576101008083540402835291602001916112b8565b820191906000526020600020905b81548152906001019060200180831161129b57829003601f168201915b5050505050815250509050919050565b60055481565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160149054906101000a900460ff161561135e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611355906133fc565b60405180910390fd5b60008151116113a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139990613468565b60405180910390fd5b60405180608001604052808281526020013373ffffffffffffffffffffffffffffffffffffffff16815260200160011515815260200160405180602001604052806000815250815250600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001908161143f9190613126565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff02191690831515021790555060608201518160020190816114bc9190613126565b509050506005600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb336006546040518363ffffffff1660e01b8152600401611564929190613488565b6020604051808303816000875af1158015611583573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a79190612e7f565b503373ffffffffffffffffffffffffffffffffffffffff167f48cac28ad4dc618e15f4c2dd5e97751182f166de97b25618318b2112aa951a2f826040516115ee91906134b1565b60405180910390a250565b611601612404565b61160b600061248b565b565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160149054906101000a900460ff1661169c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161169390612da4565b60405180910390fd5b6116a4612551565b600d8054905081106116eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116e290613289565b60405180910390fd5b6000600d8281548110611701576117006132a9565b5b906000526020600020906008020190508060070160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156117a0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117979061351f565b60405180910390fd5b8060040160008154809291906117b59061353f565b919050555060018160070160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16670de0b6b3a76400006040518363ffffffff1660e01b815260040161189d9291906135c2565b6020604051808303816000875af11580156118bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e09190612e7f565b50813373ffffffffffffffffffffffffffffffffffffffff167f62500381f39eb6f48b6e6f104021ceeaca9e5354918dc17b4a15bf87c5f5d28b60405160405180910390a35061192e612597565b50565b6000600d80549050905090565b611946612404565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb61198c611a8b565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016119e79190612a5c565b602060405180830381865afa158015611a04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a289190613600565b6040518363ffffffff1660e01b8152600401611a45929190613488565b6020604051808303816000875af1158015611a64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a889190612e7f565b50565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6003602052806000526040600020600091509050806000018054611ad890612d27565b80601f0160208091040260200160405190810160405280929190818152602001828054611b0490612d27565b8015611b515780601f10611b2657610100808354040283529160200191611b51565b820191906000526020600020905b815481529060010190602001808311611b3457829003601f168201915b5050505050908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160149054906101000a900460ff1690806002018054611b9f90612d27565b80601f0160208091040260200160405190810160405280929190818152602001828054611bcb90612d27565b8015611c185780601f10611bed57610100808354040283529160200191611c18565b820191906000526020600020905b815481529060010190602001808311611bfb57829003601f168201915b5050505050905084565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160149054906101000a900460ff16611cb1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ca890612da4565b60405180910390fd5b611cb9612551565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33306005546040518463ffffffff1660e01b8152600401611d1a93929190612e1c565b6020604051808303816000875af1158015611d39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5d9190612e7f565b611d9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d9390612ef8565b60405180910390fd5b600d805490508210611de3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dda90613289565b60405180910390fd5b6000815111611e27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1e90613679565b60405180910390fd5b6000600c600084815260200190815260200160002054905060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200183815260200142815250600b6000858152602001908152602001600020600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019081611ef09190613126565b5060408201518160020155905050600c60008481526020019081526020016000206000815480929190611f229061353f565b9190505550600d8381548110611f3b57611f3a6132a9565b5b90600052602060002090600802016005016000815480929190611f5d9061353f565b9190505550823373ffffffffffffffffffffffffffffffffffffffff167fdb68d60a2d5659f0528e369fe9a8cfdbec13beb23609aa9a7a5c2a2d973117e48442604051611fab929190613699565b60405180910390a350611fbc612597565b5050565b60045481565b60075481565b600c6020528060005260406000206000915090505481565b611fec612404565b81600481905550806005819055505050565b600a6020528060005260406000206000915090505481565b60086020528060005260406000206000915090505481565b612036612404565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036120a85760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161209f9190612a5c565b60405180910390fd5b6120b18161248b565b50565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160149054906101000a900460ff16612143576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161213a90612da4565b60405180910390fd5b600d80549050811061218a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161218190613715565b60405180910390fd5b6000600d6001816001815401808255809150500390600052602060002090600802019050338160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600d8281548110612205576122046132a9565b5b90600052602060002090600802016001018160010190816122269190613760565b50600d828154811061223b5761223a6132a9565b5b906000526020600020906008020160020181600201908161225c9190613760565b504281600301819055508181600601819055503373ffffffffffffffffffffffffffffffffffffffff167f1c03620db49e9abd75c892c4d5777b171bbcba631506a2fd6078694a4455808c836001600d805490506122ba9190613848565b6040516122c892919061387c565b60405180910390a25050565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160149054906101000a900460ff16612363576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161235a90612da4565b60405180910390fd5b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020190816123b29190613126565b503373ffffffffffffffffffffffffffffffffffffffff167f3e22697b8c73d3349d4c96c42842b506a4f025921d2a1006eab4e8b3edde50a9826040516123f991906134b1565b60405180910390a250565b61240c6125a1565b73ffffffffffffffffffffffffffffffffffffffff1661242a611a8b565b73ffffffffffffffffffffffffffffffffffffffff16146124895761244d6125a1565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016124809190612a5c565b60405180910390fd5b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60026000540361258d576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600081905550565b6001600081905550565b600033905090565b604051806080016040528060608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600015158152602001606081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b612610816125fd565b811461261b57600080fd5b50565b60008135905061262d81612607565b92915050565b600060208284031215612649576126486125f3565b5b60006126578482850161261e565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061268b82612660565b9050919050565b61269b81612680565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156126db5780820151818401526020810190506126c0565b60008484015250505050565b6000601f19601f8301169050919050565b6000612703826126a1565b61270d81856126ac565b935061271d8185602086016126bd565b612726816126e7565b840191505092915050565b61273a816125fd565b82525050565b600060e082019050612755600083018a612692565b818103602083015261276781896126f8565b9050818103604083015261277b81886126f8565b905061278a6060830187612731565b6127976080830186612731565b6127a460a0830185612731565b6127b160c0830184612731565b98975050505050505050565b6127c681612680565b81146127d157600080fd5b50565b6000813590506127e3816127bd565b92915050565b6000602082840312156127ff576127fe6125f3565b5b600061280d848285016127d4565b91505092915050565b600060208201905061282b6000830184612731565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612873826126e7565b810181811067ffffffffffffffff821117156128925761289161283b565b5b80604052505050565b60006128a56125e9565b90506128b1828261286a565b919050565b600067ffffffffffffffff8211156128d1576128d061283b565b5b6128da826126e7565b9050602081019050919050565b82818337600083830152505050565b6000612909612904846128b6565b61289b565b90508281526020810184848401111561292557612924612836565b5b6129308482856128e7565b509392505050565b600082601f83011261294d5761294c612831565b5b813561295d8482602086016128f6565b91505092915050565b6000806040838503121561297d5761297c6125f3565b5b600083013567ffffffffffffffff81111561299b5761299a6125f8565b5b6129a785828601612938565b925050602083013567ffffffffffffffff8111156129c8576129c76125f8565b5b6129d485828601612938565b9150509250929050565b600080604083850312156129f5576129f46125f3565b5b6000612a038582860161261e565b9250506020612a148582860161261e565b9150509250929050565b6000606082019050612a336000830186612692565b8181036020830152612a4581856126f8565b9050612a546040830184612731565b949350505050565b6000602082019050612a716000830184612692565b92915050565b6000819050919050565b6000612a9c612a97612a9284612660565b612a77565b612660565b9050919050565b6000612aae82612a81565b9050919050565b6000612ac082612aa3565b9050919050565b612ad081612ab5565b82525050565b6000602082019050612aeb6000830184612ac7565b92915050565b600082825260208201905092915050565b6000612b0d826126a1565b612b178185612af1565b9350612b278185602086016126bd565b612b30816126e7565b840191505092915050565b612b4481612680565b82525050565b60008115159050919050565b612b5f81612b4a565b82525050565b60006080830160008301518482036000860152612b828282612b02565b9150506020830151612b976020860182612b3b565b506040830151612baa6040860182612b56565b5060608301518482036060860152612bc28282612b02565b9150508091505092915050565b60006020820190508181036000830152612be98184612b65565b905092915050565b600060208284031215612c0757612c066125f3565b5b600082013567ffffffffffffffff811115612c2557612c246125f8565b5b612c3184828501612938565b91505092915050565b612c4381612b4a565b82525050565b60006080820190508181036000830152612c6381876126f8565b9050612c726020830186612692565b612c7f6040830185612c3a565b8181036060830152612c9181846126f8565b905095945050505050565b60008060408385031215612cb357612cb26125f3565b5b6000612cc18582860161261e565b925050602083013567ffffffffffffffff811115612ce257612ce16125f8565b5b612cee85828601612938565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612d3f57607f821691505b602082108103612d5257612d51612cf8565b5b50919050565b7f55736572206973206e6f74207265676973746572656400000000000000000000600082015250565b6000612d8e6016836126ac565b9150612d9982612d58565b602082019050919050565b60006020820190508181036000830152612dbd81612d81565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612dfe826125fd565b915060008203612e1157612e10612dc4565b5b600182039050919050565b6000606082019050612e316000830186612692565b612e3e6020830185612692565b612e4b6040830184612731565b949350505050565b612e5c81612b4a565b8114612e6757600080fd5b50565b600081519050612e7981612e53565b92915050565b600060208284031215612e9557612e946125f3565b5b6000612ea384828501612e6a565b91505092915050565b7f5061796d656e74206661696c6564000000000000000000000000000000000000600082015250565b6000612ee2600e836126ac565b9150612eed82612eac565b602082019050919050565b60006020820190508181036000830152612f1181612ed5565b9050919050565b7f436f6e74656e742073686f756c64206e6f7420626520656d7074790000000000600082015250565b6000612f4e601b836126ac565b9150612f5982612f18565b602082019050919050565b60006020820190508181036000830152612f7d81612f41565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612fe67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612fa9565b612ff08683612fa9565b95508019841693508086168417925050509392505050565b600061302361301e613019846125fd565b612a77565b6125fd565b9050919050565b6000819050919050565b61303d83613008565b6130516130498261302a565b848454612fb6565b825550505050565b600090565b613066613059565b613071818484613034565b505050565b5b818110156130955761308a60008261305e565b600181019050613077565b5050565b601f8211156130da576130ab81612f84565b6130b484612f99565b810160208510156130c3578190505b6130d76130cf85612f99565b830182613076565b50505b505050565b600082821c905092915050565b60006130fd600019846008026130df565b1980831691505092915050565b600061311683836130ec565b9150826002028217905092915050565b61312f826126a1565b67ffffffffffffffff8111156131485761314761283b565b5b6131528254612d27565b61315d828285613099565b600060209050601f831160018114613190576000841561317e578287015190505b613188858261310a565b8655506131f0565b601f19841661319e86612f84565b60005b828110156131c6578489015182556001820191506020850194506020810190506131a1565b868310156131e357848901516131df601f8916826130ec565b8355505b6001600288020188555050505b505050505050565b6000606082019050818103600083015261321281866126f8565b9050818103602083015261322681856126f8565b90506132356040830184612731565b949350505050565b7f506f737420646f6573206e6f7420657869737400000000000000000000000000600082015250565b60006132736013836126ac565b915061327e8261323d565b602082019050919050565b600060208201905081810360008301526132a281613266565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f436f6d6d656e7420646f6573206e6f7420657869737400000000000000000000600082015250565b600061330e6016836126ac565b9150613319826132d8565b602082019050919050565b6000602082019050818103600083015261333d81613301565b9050919050565b7f55736572206e6f7420666f756e64000000000000000000000000000000000000600082015250565b600061337a600e836126ac565b915061338582613344565b602082019050919050565b600060208201905081810360008301526133a98161336d565b9050919050565b7f5573657220697320616c72656164792072656769737465726564000000000000600082015250565b60006133e6601a836126ac565b91506133f1826133b0565b602082019050919050565b60006020820190508181036000830152613415816133d9565b9050919050565b7f557365726e616d652073686f756c64206e6f7420626520656d70747900000000600082015250565b6000613452601c836126ac565b915061345d8261341c565b602082019050919050565b6000602082019050818103600083015261348181613445565b9050919050565b600060408201905061349d6000830185612692565b6134aa6020830184612731565b9392505050565b600060208201905081810360008301526134cb81846126f8565b905092915050565b7f557365722068617320616c7265616479206c696b6564207468697320706f7374600082015250565b60006135096020836126ac565b9150613514826134d3565b602082019050919050565b60006020820190508181036000830152613538816134fc565b9050919050565b600061354a826125fd565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361357c5761357b612dc4565b5b600182019050919050565b6000819050919050565b60006135ac6135a76135a284613587565b612a77565b6125fd565b9050919050565b6135bc81613591565b82525050565b60006040820190506135d76000830185612692565b6135e460208301846135b3565b9392505050565b6000815190506135fa81612607565b92915050565b600060208284031215613616576136156125f3565b5b6000613624848285016135eb565b91505092915050565b7f436f6d6d656e742073686f756c64206e6f7420626520656d7074790000000000600082015250565b6000613663601b836126ac565b915061366e8261362d565b602082019050919050565b6000602082019050818103600083015261369281613656565b9050919050565b600060408201905081810360008301526136b381856126f8565b90506136c26020830184612731565b9392505050565b7f4f726967696e616c20706f737420646f6573206e6f7420657869737400000000600082015250565b60006136ff601c836126ac565b915061370a826136c9565b602082019050919050565b6000602082019050818103600083015261372e816136f2565b9050919050565b60008154905061374481612d27565b9050919050565b60008190508160005260206000209050919050565b81810361376e575050613846565b61377782613735565b67ffffffffffffffff8111156137905761378f61283b565b5b61379a8254612d27565b6137a5828285613099565b6000601f8311600181146137d457600084156137c2578287015490505b6137cc858261310a565b86555061383f565b601f1984166137e28761374b565b96506137ed86612f84565b60005b82811015613815578489015482556001820191506001850194506020810190506137f0565b86831015613832578489015461382e601f8916826130ec565b8355505b6001600288020188555050505b5050505050505b565b6000613853826125fd565b915061385e836125fd565b925082820390508181111561387657613875612dc4565b5b92915050565b60006040820190506138916000830185612731565b61389e6020830184612731565b939250505056fea26469706673582212208126d44e20dae15a156ca1cd76b6b7cf4739a4d458ee09e030c080cfed64ab1564736f6c634300081c0033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createPost(string,string)": {
        "notice": "Creates a new post, optionally with an image"
      },
      "getPost(uint256)": {
        "notice": "Returns post data, including new image and originalPostId fields"
      },
      "setProfileImage(string)": {
        "notice": "Sets or updates the user's profile picture"
      },
      "sharePost(uint256)": {
        "notice": "Shares an existing post"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 266,
        "contract": "contracts/Chainchat.sol:Chainchat",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 8,
        "contract": "contracts/Chainchat.sol:Chainchat",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 336,
        "contract": "contracts/Chainchat.sol:Chainchat",
        "label": "ccToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)225"
      },
      {
        "astId": 351,
        "contract": "contracts/Chainchat.sol:Chainchat",
        "label": "users",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(User)346_storage)"
      },
      {
        "astId": 385,
        "contract": "contracts/Chainchat.sol:Chainchat",
        "label": "postCost",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 392,
        "contract": "contracts/Chainchat.sol:Chainchat",
        "label": "commentCost",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 399,
        "contract": "contracts/Chainchat.sol:Chainchat",
        "label": "signupBonus",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 406,
        "contract": "contracts/Chainchat.sol:Chainchat",
        "label": "referralBonus",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 413,
        "contract": "contracts/Chainchat.sol:Chainchat",
        "label": "freePostsRemaining",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 417,
        "contract": "contracts/Chainchat.sol:Chainchat",
        "label": "referrers",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 421,
        "contract": "contracts/Chainchat.sol:Chainchat",
        "label": "referralCount",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 428,
        "contract": "contracts/Chainchat.sol:Chainchat",
        "label": "postComments",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Comment)378_storage))"
      },
      {
        "astId": 432,
        "contract": "contracts/Chainchat.sol:Chainchat",
        "label": "postCommentsCount",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 436,
        "contract": "contracts/Chainchat.sol:Chainchat",
        "label": "posts",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_struct(Post)371_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Post)371_storage)dyn_storage": {
        "base": "t_struct(Post)371_storage",
        "encoding": "dynamic_array",
        "label": "struct Chainchat.Post[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)225": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(User)346_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Chainchat.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)346_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Comment)378_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct Chainchat.Comment))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Comment)378_storage)"
      },
      "t_mapping(t_uint256,t_struct(Comment)378_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Chainchat.Comment)",
        "numberOfBytes": "32",
        "value": "t_struct(Comment)378_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Comment)378_storage": {
        "encoding": "inplace",
        "label": "struct Chainchat.Comment",
        "members": [
          {
            "astId": 373,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "commenter",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 375,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "content",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 377,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "timestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Post)371_storage": {
        "encoding": "inplace",
        "label": "struct Chainchat.Post",
        "members": [
          {
            "astId": 354,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "author",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 356,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "content",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 358,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "image",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 360,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "timestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 362,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "likes",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 364,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "commentsCount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 366,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "originalPostId",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 370,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "likedBy",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(User)346_storage": {
        "encoding": "inplace",
        "label": "struct Chainchat.User",
        "members": [
          {
            "astId": 339,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "username",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 341,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "userAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 343,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "isRegistered",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 345,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "profileImage",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}