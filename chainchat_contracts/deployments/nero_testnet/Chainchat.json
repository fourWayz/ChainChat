{
  "address": "0x622aB7DC911ed6273A8569fcA21D2F041b2055DF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "commenter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "postId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "content",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "CommentAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "content",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "image",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PostCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "liker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "postId",
          "type": "uint256"
        }
      ],
      "name": "PostLiked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sharer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "originalPostId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPostId",
          "type": "uint256"
        }
      ],
      "name": "PostShared",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "image",
          "type": "string"
        }
      ],
      "name": "ProfileImageUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "username",
          "type": "string"
        }
      ],
      "name": "UserRegistered",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_postId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_content",
          "type": "string"
        }
      ],
      "name": "addComment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ccToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commentCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_content",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_image",
          "type": "string"
        }
      ],
      "name": "createPost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newUsername",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_newProfileImage",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_newBio",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_newCoverImage",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "_newInterests",
          "type": "string[]"
        }
      ],
      "name": "editProfile",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "freePostsRemaining",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_postId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_commentId",
          "type": "uint256"
        }
      ],
      "name": "getComment",
      "outputs": [
        {
          "internalType": "address",
          "name": "commenter",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "content",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getFreePostsRemaining",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_postId",
          "type": "uint256"
        }
      ],
      "name": "getPost",
      "outputs": [
        {
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "content",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "image",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "likes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "commentsCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "originalPostId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPostsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "getUserByAddress",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "username",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "userAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isRegistered",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "profileImage",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "bio",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "coverPhoto",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "interests",
              "type": "string[]"
            }
          ],
          "internalType": "struct Chainchat.User",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserInterests",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserStats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "posts",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "likes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "comments",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "interests",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_postId",
          "type": "uint256"
        }
      ],
      "name": "likePost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "postComments",
      "outputs": [
        {
          "internalType": "address",
          "name": "commenter",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "content",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "postCommentsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "postCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "posts",
      "outputs": [
        {
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "content",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "image",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "likes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "commentsCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "originalPostId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referralBonus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "referralCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "referrers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_username",
          "type": "string"
        }
      ],
      "name": "registerUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_bio",
          "type": "string"
        }
      ],
      "name": "setBio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_postCost",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_commentCost",
          "type": "uint256"
        }
      ],
      "name": "setCosts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_cover",
          "type": "string"
        }
      ],
      "name": "setCoverPhoto",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_image",
          "type": "string"
        }
      ],
      "name": "setProfileImage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "setTokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "_interests",
          "type": "string[]"
        }
      ],
      "name": "setUserInterests",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_postId",
          "type": "uint256"
        }
      ],
      "name": "sharePost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "signupBonus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userCommentCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userInterests",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userLikeCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userPostCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "string",
          "name": "username",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isRegistered",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "profileImage",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "bio",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "coverPhoto",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "walletToCreator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7cadd83dd042f51cfac45a721944f9347bcdd1ac9594ff624df5372f6e26d3b8",
  "receipt": {
    "to": null,
    "from": "0x9409C4AB1163037027c91B47893632174d46e6BA",
    "contractAddress": "0x622aB7DC911ed6273A8569fcA21D2F041b2055DF",
    "transactionIndex": 0,
    "gasUsed": "4744918",
    "logsBloom": "0x
    "blockHash": "0x2ef7c9082898dcdf2e53ff45e42869f2051f995cd2c78f93b1560e3674a6ebaa",
    "transactionHash": "0x7cadd83dd042f51cfac45a721944f9347bcdd1ac9594ff624df5372f6e26d3b8",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 8070720,
        "transactionHash": "0x7cadd83dd042f51cfac45a721944f9347bcdd1ac9594ff624df5372f6e26d3b8",
        "address": "0x622aB7DC911ed6273A8569fcA21D2F041b2055DF",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009409c4ab1163037027c91b47893632174d46e6ba"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x2ef7c9082898dcdf2e53ff45e42869f2051f995cd2c78f93b1560e3674a6ebaa"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 8070720,
        "transactionHash": "0x7cadd83dd042f51cfac45a721944f9347bcdd1ac9594ff624df5372f6e26d3b8",
        "address": "0x622aB7DC911ed6273A8569fcA21D2F041b2055DF",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000009409c4ab1163037027c91b47893632174d46e6ba",
          "0x0000000000000000000000009409c4ab1163037027c91b47893632174d46e6ba"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x2ef7c9082898dcdf2e53ff45e42869f2051f995cd2c78f93b1560e3674a6ebaa"
      }
    ],
    "blockNumber": 8070720,
    "cumulativeGasUsed": "4744918",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE9Df3B11B91845Db9235A70FA5eDd879FEA4E095"
  ],
  "numDeployments": 12,
  "solcInputHash": "9f970a9d0639014b7e0f2e67cda64f00",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"commenter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"CommentAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PostCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"}],\"name\":\"PostLiked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sharer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originalPostId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPostId\",\"type\":\"uint256\"}],\"name\":\"PostShared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"}],\"name\":\"ProfileImageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"}],\"name\":\"UserRegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_postId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_content\",\"type\":\"string\"}],\"name\":\"addComment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ccToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commentCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_content\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_image\",\"type\":\"string\"}],\"name\":\"createPost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newUsername\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_newProfileImage\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_newBio\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_newCoverImage\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_newInterests\",\"type\":\"string[]\"}],\"name\":\"editProfile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"freePostsRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_postId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_commentId\",\"type\":\"uint256\"}],\"name\":\"getComment\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"commenter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getFreePostsRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_postId\",\"type\":\"uint256\"}],\"name\":\"getPost\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"likes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commentsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originalPostId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPostsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getUserByAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"profileImage\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"bio\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"coverPhoto\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"interests\",\"type\":\"string[]\"}],\"internalType\":\"struct Chainchat.User\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserInterests\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"posts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"likes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"comments\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"interests\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_postId\",\"type\":\"uint256\"}],\"name\":\"likePost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"postComments\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"commenter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"postCommentsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"posts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"likes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commentsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originalPostId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_username\",\"type\":\"string\"}],\"name\":\"registerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_bio\",\"type\":\"string\"}],\"name\":\"setBio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_postCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_commentCost\",\"type\":\"uint256\"}],\"name\":\"setCosts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_cover\",\"type\":\"string\"}],\"name\":\"setCoverPhoto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_image\",\"type\":\"string\"}],\"name\":\"setProfileImage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_interests\",\"type\":\"string[]\"}],\"name\":\"setUserInterests\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_postId\",\"type\":\"uint256\"}],\"name\":\"sharePost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signupBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userCommentCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userInterests\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLikeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userPostCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"profileImage\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"bio\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"coverPhoto\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletToCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Chainchat.sol\":\"Chainchat\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"contracts/Chainchat.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract Chainchat is ReentrancyGuard, Ownable {\\n    IERC20 public ccToken;\\n\\n    struct User {\\n        string username;\\n        address userAddress;\\n        address sender;\\n        bool isRegistered;\\n        string profileImage;\\n        string bio;\\n        string coverPhoto;\\n         string[] interests;\\n    }\\n\\n    struct Post {\\n        address author;\\n        string content;\\n        string image;\\n        uint256 timestamp;\\n        uint256 likes;\\n        uint256 commentsCount;\\n        uint256 originalPostId;\\n        mapping(address => bool) likedBy;\\n    }\\n\\n    struct Comment {\\n        address commenter;\\n        string content;\\n        uint256 timestamp;\\n    }\\n\\n    uint256 public postCost = 10 * 10 ** 18;\\n    uint256 public commentCost = 5 * 10 ** 18;\\n    uint256 public signupBonus = 100 * 10 ** 18;\\n    uint256 public referralBonus = 50 * 10 ** 18;\\n    string[] public interests;\\n\\n    mapping(address => User) public users;\\n    mapping(address => address) public walletToCreator;\\n    mapping(address => uint256) public freePostsRemaining;\\n    mapping(address => address) public referrers;\\n    mapping(address => uint256) public referralCount;\\n    mapping(uint256 => mapping(uint256 => Comment)) public postComments;\\n    mapping(uint256 => uint256) public postCommentsCount;\\n    mapping(address => string[]) public userInterests;\\n\\n    // Track user stats\\n    mapping(address => uint256) public userPostCount;\\n    mapping(address => uint256) public userLikeCount;\\n    mapping(address => uint256) public userCommentCount;\\n\\n    Post[] public posts;\\n\\n    event UserRegistered(address indexed userAddress, string username);\\n    event ProfileImageUpdated(address indexed userAddress, string image);\\n    event PostCreated(\\n        address indexed author,\\n        string content,\\n        string image,\\n        uint256 timestamp\\n    );\\n    event PostShared(\\n        address indexed sharer,\\n        uint256 originalPostId,\\n        uint256 newPostId\\n    );\\n    event PostLiked(address indexed liker, uint256 indexed postId);\\n    event CommentAdded(\\n        address indexed commenter,\\n        uint256 indexed postId,\\n        string content,\\n        uint256 timestamp\\n    );\\n\\n    modifier onlyRegisteredUser() {\\n        require(\\n            users[_getUserAddress()].isRegistered,\\n            \\\"User is not registered\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address _tokenAddress) Ownable(msg.sender) {\\n        ccToken = IERC20(_tokenAddress);\\n        transferOwnership(msg.sender);\\n    }\\n\\n    function registerUser(address creator, string memory _username) external {\\n        require(!users[creator].isRegistered, \\\"User is already registered\\\");\\n        require(bytes(_username).length > 0, \\\"Username should not be empty\\\");\\n\\n        users[creator] = User({\\n            username: _username,\\n            userAddress: creator,\\n            sender: msg.sender,\\n            isRegistered: true,\\n            profileImage: \\\"\\\",\\n            bio: \\\"\\\",\\n            coverPhoto: \\\"\\\",\\n             interests: new string[](0)\\n        });\\n\\n        walletToCreator[msg.sender] = creator;\\n        freePostsRemaining[msg.sender] = FREE_POST_ALLOWANCE;\\n        ccToken.transfer(msg.sender, signupBonus);\\n\\n        emit UserRegistered(creator, _username);\\n    }\\n\\n    function setProfileImage(string memory _image) external onlyRegisteredUser {\\n        address user = _getUserAddress();\\n        users[user].profileImage = _image;\\n        emit ProfileImageUpdated(user, _image);\\n    }\\n\\n    function setBio(string memory _bio) external onlyRegisteredUser {\\n        address user = _getUserAddress();\\n        users[user].bio = _bio;\\n    }\\n\\n    function setCoverPhoto(string memory _cover) external onlyRegisteredUser {\\n        address user = _getUserAddress();\\n        users[user].coverPhoto = _cover;\\n    }\\n\\n    function createPost(\\n        string memory _content,\\n        string memory _image\\n    ) external onlyRegisteredUser {\\n        address user = _getUserAddress();\\n\\n        if (freePostsRemaining[msg.sender] > 0) {\\n            freePostsRemaining[msg.sender]--;\\n        } else {\\n            require(\\n                ccToken.transferFrom(msg.sender, address(this), postCost),\\n                \\\"Payment failed\\\"\\n            );\\n        }\\n\\n        require(bytes(_content).length > 0, \\\"Content should not be empty\\\");\\n\\n        Post storage newPost = posts.push();\\n        newPost.author = user;\\n        newPost.content = _content;\\n        newPost.image = _image;\\n        newPost.timestamp = block.timestamp;\\n        newPost.originalPostId = 0;\\n        userPostCount[user]++;\\n\\n        emit PostCreated(user, _content, _image, block.timestamp);\\n    }\\n\\n    function sharePost(uint256 _postId) external onlyRegisteredUser {\\n        require(_postId < posts.length, \\\"Original post does not exist\\\");\\n        address user = _getUserAddress();\\n\\n        Post storage sharedPost = posts.push();\\n        sharedPost.author = user;\\n        sharedPost.content = posts[_postId].content;\\n        sharedPost.image = posts[_postId].image;\\n        sharedPost.timestamp = block.timestamp;\\n        sharedPost.originalPostId = _postId;\\n\\n        emit PostShared(user, _postId, posts.length - 1);\\n    }\\n\\n    function likePost(\\n        uint256 _postId\\n    ) external onlyRegisteredUser nonReentrant {\\n        require(_postId < posts.length, \\\"Post does not exist\\\");\\n        address user = _getUserAddress();\\n\\n        Post storage post = posts[_postId];\\n        require(!post.likedBy[user], \\\"User has already liked this post\\\");\\n\\n        post.likes++;\\n        userLikeCount[user]++;\\n        post.likedBy[user] = true;\\n\\n        ccToken.transfer(post.author, 1 * 10 ** 18);\\n\\n        emit PostLiked(user, _postId);\\n    }\\n\\n    function addComment(\\n        uint256 _postId,\\n        string memory _content\\n    ) external onlyRegisteredUser nonReentrant {\\n        require(_postId < posts.length, \\\"Post does not exist\\\");\\n        require(bytes(_content).length > 0, \\\"Comment should not be empty\\\");\\n        address user = _getUserAddress();\\n\\n        // require(\\n        //     ccToken.transferFrom(msg.sender, address(this), commentCost),\\n        //     \\\"Payment failed\\\"\\n        // );\\n\\n        uint256 commentId = postCommentsCount[_postId];\\n        postComments[_postId][commentId] = Comment({\\n            commenter: user,\\n            content: _content,\\n            timestamp: block.timestamp\\n        });\\n\\n        postCommentsCount[_postId]++;\\n        posts[_postId].commentsCount++;\\n        userCommentCount[user]++;\\n\\n        emit CommentAdded(user, _postId, _content, block.timestamp);\\n    }\\n\\n    function getUserByAddress(\\n        address _userAddress\\n    ) external view returns (User memory) {\\n        require(users[_userAddress].isRegistered, \\\"User not found\\\");\\n        return users[_userAddress];\\n    }\\n\\n    function getPostsCount() external view returns (uint256) {\\n        return posts.length;\\n    }\\n\\n    function getPost(\\n        uint256 _postId\\n    )\\n        external\\n        view\\n        returns (\\n            address author,\\n            string memory content,\\n            string memory image,\\n            uint256 timestamp,\\n            uint256 likes,\\n            uint256 commentsCount,\\n            uint256 originalPostId\\n        )\\n    {\\n        require(_postId < posts.length, \\\"Post does not exist\\\");\\n        Post storage post = posts[_postId];\\n        return (\\n            post.author,\\n            post.content,\\n            post.image,\\n            post.timestamp,\\n            post.likes,\\n            post.commentsCount,\\n            post.originalPostId\\n        );\\n    }\\n\\n    function getComment(\\n        uint256 _postId,\\n        uint256 _commentId\\n    )\\n        external\\n        view\\n        returns (address commenter, string memory content, uint256 timestamp)\\n    {\\n        require(_postId < posts.length, \\\"Post does not exist\\\");\\n        require(\\n            _commentId < postCommentsCount[_postId],\\n            \\\"Comment does not exist\\\"\\n        );\\n\\n        Comment memory comment = postComments[_postId][_commentId];\\n        return (comment.commenter, comment.content, comment.timestamp);\\n    }\\n\\n    function getFreePostsRemaining(\\n        address _user\\n    ) external view returns (uint256) {\\n        return freePostsRemaining[_user];\\n    }\\n\\n    function getUserStats(\\n        address user\\n    ) external view returns (uint256 posts, uint256 likes, uint256 comments) {\\n        return (\\n            userPostCount[user],\\n            userLikeCount[user],\\n            userCommentCount[user]\\n        );\\n    }\\n\\n    function setTokenAddress(address _tokenAddress) external onlyOwner {\\n        ccToken = IERC20(_tokenAddress);\\n    }\\n\\n    function setCosts(\\n        uint256 _postCost,\\n        uint256 _commentCost\\n    ) external onlyOwner {\\n        postCost = _postCost;\\n        commentCost = _commentCost;\\n    }\\n\\n    function withdrawTokens() external onlyOwner {\\n        ccToken.transfer(owner(), ccToken.balanceOf(address(this)));\\n    }\\n\\n    function editProfile(\\n        string memory _newUsername,\\n        string memory _newProfileImage,\\n        string memory _newBio,\\n        string memory _newCoverImage,\\n        string[] memory _newInterests\\n    ) external onlyRegisteredUser {\\n        address creator = walletToCreator[msg.sender];\\n        require(bytes(_newUsername).length > 0, \\\"Username cannot be empty\\\");\\n\\n        User storage user = users[creator];\\n        user.username = _newUsername;\\n        user.profileImage = _newProfileImage;\\n        user.bio = _newBio;\\n        user.coverPhoto = _newCoverImage;\\n        user.interests = _newInterests;\\n\\n        emit ProfileImageUpdated(creator, _newProfileImage);\\n        // emit BioUpdated(creator, _newBio);\\n        // emit CoverImageUpdated(creator, _newCoverImage);\\n        // emit InterestsUpdated(creator, _newInterests);\\n    }\\n\\n    function setUserInterests(\\n        string[] memory _interests\\n    ) external onlyRegisteredUser {\\n        address user = _getUserAddress();\\n\\n        delete userInterests[user];\\n\\n        for (uint256 i = 0; i < _interests.length; i++) {\\n            userInterests[user].push(_interests[i]);\\n        }\\n    }\\n\\n    function getUserInterests(\\n        address _user\\n    ) external view returns (string[] memory) {\\n        return userInterests[_user];\\n    }\\n\\n    // \\ud83e\\udde0 Utility to resolve real user identity\\n    function _getUserAddress() internal view returns (address) {\\n        address creator = walletToCreator[msg.sender];\\n        return creator != address(0) ? creator : msg.sender;\\n    }\\n\\n    uint256 constant FREE_POST_ALLOWANCE = 10;\\n}\\n\",\"keccak256\":\"0x97f33ebda4bd399373832735e42985522b84e99764dd3244869558fbda3a44f2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102535760003560e01c8063715018a611610146578063acb31585116100c3578063db74559b11610087578063db74559b14610782578063df7969ad146107b2578063f2fde38b146107e2578063f5d76320146107fe578063f70d205c1461081a578063fb7e06d81461083657610253565b8063acb31585146106ca578063c8bee1df146106e8578063ce7842f514610718578063d82d72bf14610736578063db5899071461076657610253565b80638da5cb5b1161010a5780638da5cb5b146105fa578063a2720f3514610618578063a87430ba14610648578063aa097f151461067e578063aa7e5683146106ae57610253565b8063715018a61461057c578063725009d3146105865780637d8494bc146105a257806383624882146105d25780638d8f2adb146105f057610253565b806348892753116101d457806360cd13ea1161019857806360cd13ea146104c457806367cb52d8146104f457806369c212f6146105125780636aa723831461054257806370cc4bb71461056057610253565b806348892753146103e05780634a3b68cc146104125780634e43603a146104425780635193c94c146104745780635c7995b4146104a657610253565b80632e4a28ca1161021b5780632e4a28ca14610312578063392338f51461034257806339bc4eb81461035e57806340731c241461037a57806340943d3d146103b057610253565b80630b1e7f83146102585780630c86a5cb1461028e5780630ea126f9146102aa57806323c4f963146102c657806326a4e8d2146102f6575b600080fd5b610272600480360381019061026d91906139c6565b610852565b6040516102859796959493929190613ad3565b60405180910390f35b6102a860048036038101906102a39190613d6b565b6109d4565b005b6102c460048036038101906102bf9190613de0565b610b6b565b005b6102e060048036038101906102db9190613e3c565b61103f565b6040516102ed9190613e69565b60405180910390f35b610310600480360381019061030b9190613e3c565b611088565b005b61032c60048036038101906103279190613e84565b6110d4565b6040516103399190613ec4565b60405180910390f35b61035c60048036038101906103579190613ee6565b61118d565b005b61037860048036038101906103739190613f5e565b611544565b005b610394600480360381019061038f91906139c6565b61163a565b6040516103a79796959493929190613ad3565b60405180910390f35b6103ca60048036038101906103c59190613e3c565b611825565b6040516103d79190613e69565b60405180910390f35b6103fa60048036038101906103f59190613fa7565b61183d565b60405161040993929190613fe7565b60405180910390f35b61042c60048036038101906104279190613e3c565b611a21565b6040516104399190614025565b60405180910390f35b61045c60048036038101906104579190613e3c565b611a54565b60405161046b93929190614040565b60405180910390f35b61048e60048036038101906104899190613fa7565b611b26565b60405161049d93929190613fe7565b60405180910390f35b6104ae611c05565b6040516104bb91906140d6565b60405180910390f35b6104de60048036038101906104d99190613e3c565b611c2b565b6040516104eb9190613e69565b60405180910390f35b6104fc611c43565b6040516105099190613e69565b60405180910390f35b61052c60048036038101906105279190613e3c565b611c49565b60405161053991906142f3565b60405180910390f35b61054a61211a565b6040516105579190613e69565b60405180910390f35b61057a60048036038101906105759190614315565b612120565b005b610584612359565b005b6105a0600480360381019061059b91906139c6565b61236d565b005b6105bc60048036038101906105b79190613e3c565b6126fa565b6040516105c991906144a2565b60405180910390f35b6105da612812565b6040516105e79190613e69565b60405180910390f35b6105f861281f565b005b61060261296c565b60405161060f9190614025565b60405180910390f35b610632600480360381019061062d9190613e3c565b612996565b60405161063f9190614025565b60405180910390f35b610662600480360381019061065d9190613e3c565b6129c9565b60405161067597969594939291906144d3565b60405180910390f35b610698600480360381019061069391906139c6565b612c78565b6040516106a59190613ec4565b60405180910390f35b6106c860048036038101906106c3919061455e565b612d24565b005b6106d2613048565b6040516106df9190613e69565b60405180910390f35b61070260048036038101906106fd9190613e3c565b61304e565b60405161070f9190613e69565b60405180910390f35b610720613066565b60405161072d9190613e69565b60405180910390f35b610750600480360381019061074b91906139c6565b61306c565b60405161075d9190613e69565b60405180910390f35b610780600480360381019061077b9190613fa7565b613084565b005b61079c60048036038101906107979190613e3c565b61309e565b6040516107a99190613e69565b60405180910390f35b6107cc60048036038101906107c79190613e3c565b6130b6565b6040516107d99190613e69565b60405180910390f35b6107fc60048036038101906107f79190613e3c565b6130ce565b005b610818600480360381019061081391906139c6565b613154565b005b610834600480360381019061082f9190613f5e565b613388565b005b610850600480360381019061084b9190613f5e565b6134cc565b005b6013818154811061086257600080fd5b90600052602060002090600802016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010180546108ab906145e9565b80601f01602080910402602001604051908101604052809291908181526020018280546108d7906145e9565b80156109245780601f106108f957610100808354040283529160200191610924565b820191906000526020600020905b81548152906001019060200180831161090757829003601f168201915b505050505090806002018054610939906145e9565b80601f0160208091040260200160405190810160405280929190818152602001828054610965906145e9565b80156109b25780601f10610987576101008083540402835291602001916109b2565b820191906000526020600020905b81548152906001019060200180831161099557829003601f168201915b5050505050908060030154908060040154908060050154908060060154905087565b600860006109e06135c2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160149054906101000a900460ff16610a6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6190614666565b60405180910390fd5b6000610a746135c2565b9050600f60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610ac1919061380e565b60005b8251811015610b6657600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020838281518110610b1f57610b1e614686565b5b6020026020010151908060018154018082558091505060019003906000526020600020016000909190919091509081610b589190614857565b508080600101915050610ac4565b505050565b600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160149054906101000a900460ff1615610bfb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf290614975565b60405180910390fd5b6000815111610c3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c36906149e1565b60405180910390fd5b6040518061010001604052808281526020018373ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff168152602001600115158152602001604051806020016040528060008152508152602001604051806020016040528060008152508152602001604051806020016040528060008152508152602001600067ffffffffffffffff811115610cec57610ceb613b55565b5b604051908082528060200260200182016040528015610d1f57816020015b6060815260200190600190039081610d0a5790505b50815250600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000019081610d779190614857565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160146101000a81548160ff0219169083151502179055506080820151816003019081610e3b9190614857565b5060a0820151816004019081610e519190614857565b5060c0820151816005019081610e679190614857565b5060e0820151816006019080519060200190610e8492919061382f565b5090505081600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600a8060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb336005546040518363ffffffff1660e01b8152600401610fa9929190614a01565b6020604051808303816000875af1158015610fc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fec9190614a56565b508173ffffffffffffffffffffffffffffffffffffffff167f48cac28ad4dc618e15f4c2dd5e97751182f166de97b25618318b2112aa951a2f826040516110339190613ec4565b60405180910390a25050565b6000600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b611090613669565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600f60205281600052604060002081815481106110f057600080fd5b9060005260206000200160009150915050805461110c906145e9565b80601f0160208091040260200160405190810160405280929190818152602001828054611138906145e9565b80156111855780601f1061115a57610100808354040283529160200191611185565b820191906000526020600020905b81548152906001019060200180831161116857829003601f168201915b505050505081565b600860006111996135c2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160149054906101000a900460ff16611223576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121a90614666565b60405180910390fd5b600061122d6135c2565b90506000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411156112d157600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906112c790614ab2565b91905055506113b5565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33306003546040518463ffffffff1660e01b815260040161133293929190614adb565b6020604051808303816000875af1158015611351573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113759190614a56565b6113b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ab90614b5e565b60405180910390fd5b5b60008351116113f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113f090614bca565b60405180910390fd5b600060136001816001815401808255809150500390600052602060002090600802019050818160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838160010190816114719190614857565b50828160020190816114839190614857565b5042816003018190555060008160060181905550601060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906114e790614bea565b91905055508173ffffffffffffffffffffffffffffffffffffffff167f4dc899ab633bbd3c97004820698910906a6748451e00b59a3e011358dc2f9fb585854260405161153693929190614c32565b60405180910390a250505050565b600860006115506135c2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160149054906101000a900460ff166115da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115d190614666565b60405180910390fd5b60006115e46135c2565b905081600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050190816116359190614857565b505050565b6000606080600080600080601380549050881061168c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168390614cc3565b60405180910390fd5b6000601389815481106116a2576116a1614686565b5b906000526020600020906008020190508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16816001018260020183600301548460040154856005015486600601548580546116ff906145e9565b80601f016020809104026020016040519081016040528092919081815260200182805461172b906145e9565b80156117785780601f1061174d57610100808354040283529160200191611778565b820191906000526020600020905b81548152906001019060200180831161175b57829003601f168201915b5050505050955084805461178b906145e9565b80601f01602080910402602001604051908101604052809291908181526020018280546117b7906145e9565b80156118045780601f106117d957610100808354040283529160200191611804565b820191906000526020600020905b8154815290600101906020018083116117e757829003601f168201915b50505050509450975097509750975097509750975050919395979092949650565b60116020528060005260406000206000915090505481565b600060606000601380549050851061188a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188190614cc3565b60405180910390fd5b600e60008681526020019081526020016000205484106118df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118d690614d2f565b60405180910390fd5b6000600d600087815260200190815260200160002060008681526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054611976906145e9565b80601f01602080910402602001604051908101604052809291908181526020018280546119a2906145e9565b80156119ef5780601f106119c4576101008083540402835291602001916119ef565b820191906000526020600020905b8154815290600101906020018083116119d257829003601f168201915b505050505081526020016002820154815250509050806000015181602001518260400151935093509350509250925092565b600b6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054601160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054601260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549250925092509193909250565b600d602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001018054611b7c906145e9565b80601f0160208091040260200160405190810160405280929190818152602001828054611ba8906145e9565b8015611bf55780601f10611bca57610100808354040283529160200191611bf5565b820191906000526020600020905b815481529060010190602001808311611bd857829003601f168201915b5050505050908060020154905083565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60106020528060005260406000206000915090505481565b60055481565b611c51613888565b600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160149054906101000a900460ff16611ce0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cd790614d9b565b60405180910390fd5b600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180610100016040529081600082018054611d3b906145e9565b80601f0160208091040260200160405190810160405280929190818152602001828054611d67906145e9565b8015611db45780601f10611d8957610100808354040283529160200191611db4565b820191906000526020600020905b815481529060010190602001808311611d9757829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160149054906101000a900460ff16151515158152602001600382018054611e94906145e9565b80601f0160208091040260200160405190810160405280929190818152602001828054611ec0906145e9565b8015611f0d5780601f10611ee257610100808354040283529160200191611f0d565b820191906000526020600020905b815481529060010190602001808311611ef057829003601f168201915b50505050508152602001600482018054611f26906145e9565b80601f0160208091040260200160405190810160405280929190818152602001828054611f52906145e9565b8015611f9f5780601f10611f7457610100808354040283529160200191611f9f565b820191906000526020600020905b815481529060010190602001808311611f8257829003601f168201915b50505050508152602001600582018054611fb8906145e9565b80601f0160208091040260200160405190810160405280929190818152602001828054611fe4906145e9565b80156120315780601f1061200657610100808354040283529160200191612031565b820191906000526020600020905b81548152906001019060200180831161201457829003601f168201915b5050505050815260200160068201805480602002602001604051908101604052809291908181526020016000905b8282101561210b57838290600052602060002001805461207e906145e9565b80601f01602080910402602001604051908101604052809291908181526020018280546120aa906145e9565b80156120f75780601f106120cc576101008083540402835291602001916120f7565b820191906000526020600020905b8154815290600101906020018083116120da57829003601f168201915b50505050508152602001906001019061205f565b50505050815250509050919050565b60045481565b6008600061212c6135c2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160149054906101000a900460ff166121b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121ad90614666565b60405180910390fd5b6000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600086511161225e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161225590614e07565b60405180910390fd5b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050868160000190816122b29190614857565b50858160030190816122c49190614857565b50848160040190816122d69190614857565b50838160050190816122e89190614857565b508281600601908051906020019061230192919061382f565b508173ffffffffffffffffffffffffffffffffffffffff167f3e22697b8c73d3349d4c96c42842b506a4f025921d2a1006eab4e8b3edde50a9876040516123489190613ec4565b60405180910390a250505050505050565b612361613669565b61236b60006136f0565b565b600860006123796135c2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160149054906101000a900460ff16612403576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123fa90614666565b60405180910390fd5b61240b6137b6565b6013805490508110612452576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161244990614cc3565b60405180910390fd5b600061245c6135c2565b905060006013838154811061247457612473614686565b5b906000526020600020906008020190508060070160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615612513576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161250a90614e73565b60405180910390fd5b80600401600081548092919061252890614bea565b9190505550601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919061257d90614bea565b919050555060018160070160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16670de0b6b3a76400006040518363ffffffff1660e01b8152600401612665929190614ece565b6020604051808303816000875af1158015612684573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126a89190614a56565b50828273ffffffffffffffffffffffffffffffffffffffff167f62500381f39eb6f48b6e6f104021ceeaca9e5354918dc17b4a15bf87c5f5d28b60405160405180910390a350506126f76137fc565b50565b6060600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561280757838290600052602060002001805461277a906145e9565b80601f01602080910402602001604051908101604052809291908181526020018280546127a6906145e9565b80156127f35780601f106127c8576101008083540402835291602001916127f3565b820191906000526020600020905b8154815290600101906020018083116127d657829003601f168201915b50505050508152602001906001019061275b565b505050509050919050565b6000601380549050905090565b612827613669565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb61286d61296c565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016128c89190614025565b602060405180830381865afa1580156128e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129099190614f0c565b6040518363ffffffff1660e01b8152600401612926929190614a01565b6020604051808303816000875af1158015612945573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129699190614a56565b50565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60096020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60086020528060005260406000206000915090508060000180546129ec906145e9565b80601f0160208091040260200160405190810160405280929190818152602001828054612a18906145e9565b8015612a655780601f10612a3a57610100808354040283529160200191612a65565b820191906000526020600020905b815481529060010190602001808311612a4857829003601f168201915b5050505050908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160149054906101000a900460ff1690806003018054612ad9906145e9565b80601f0160208091040260200160405190810160405280929190818152602001828054612b05906145e9565b8015612b525780601f10612b2757610100808354040283529160200191612b52565b820191906000526020600020905b815481529060010190602001808311612b3557829003601f168201915b505050505090806004018054612b67906145e9565b80601f0160208091040260200160405190810160405280929190818152602001828054612b93906145e9565b8015612be05780601f10612bb557610100808354040283529160200191612be0565b820191906000526020600020905b815481529060010190602001808311612bc357829003601f168201915b505050505090806005018054612bf5906145e9565b80601f0160208091040260200160405190810160405280929190818152602001828054612c21906145e9565b8015612c6e5780601f10612c4357610100808354040283529160200191612c6e565b820191906000526020600020905b815481529060010190602001808311612c5157829003601f168201915b5050505050905087565b60078181548110612c8857600080fd5b906000526020600020016000915090508054612ca3906145e9565b80601f0160208091040260200160405190810160405280929190818152602001828054612ccf906145e9565b8015612d1c5780601f10612cf157610100808354040283529160200191612d1c565b820191906000526020600020905b815481529060010190602001808311612cff57829003601f168201915b505050505081565b60086000612d306135c2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160149054906101000a900460ff16612dba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612db190614666565b60405180910390fd5b612dc26137b6565b6013805490508210612e09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e0090614cc3565b60405180910390fd5b6000815111612e4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e4490614f85565b60405180910390fd5b6000612e576135c2565b90506000600e600085815260200190815260200160002054905060405180606001604052808373ffffffffffffffffffffffffffffffffffffffff16815260200184815260200142815250600d6000868152602001908152602001600020600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019081612f229190614857565b5060408201518160020155905050600e60008581526020019081526020016000206000815480929190612f5490614bea565b919050555060138481548110612f6d57612f6c614686565b5b90600052602060002090600802016005016000815480929190612f8f90614bea565b9190505550601260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190612fe490614bea565b9190505550838273ffffffffffffffffffffffffffffffffffffffff167fdb68d60a2d5659f0528e369fe9a8cfdbec13beb23609aa9a7a5c2a2d973117e48542604051613032929190614fa5565b60405180910390a350506130446137fc565b5050565b60035481565b60126020528060005260406000206000915090505481565b60065481565b600e6020528060005260406000206000915090505481565b61308c613669565b81600381905550806004819055505050565b600c6020528060005260406000206000915090505481565b600a6020528060005260406000206000915090505481565b6130d6613669565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036131485760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161313f9190614025565b60405180910390fd5b613151816136f0565b50565b600860006131606135c2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160149054906101000a900460ff166131ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131e190614666565b60405180910390fd5b6013805490508110613231576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161322890615021565b60405180910390fd5b600061323b6135c2565b9050600060136001816001815401808255809150500390600052602060002090600802019050818160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550601383815481106132b8576132b7614686565b5b90600052602060002090600802016001018160010190816132d9919061506c565b50601383815481106132ee576132ed614686565b5b906000526020600020906008020160020181600201908161330f919061506c565b504281600301819055508281600601819055508173ffffffffffffffffffffffffffffffffffffffff167f1c03620db49e9abd75c892c4d5777b171bbcba631506a2fd6078694a4455808c84600160138054905061336d9190615154565b60405161337b929190615188565b60405180910390a2505050565b600860006133946135c2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160149054906101000a900460ff1661341e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161341590614666565b60405180910390fd5b60006134286135c2565b905081600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030190816134799190614857565b508073ffffffffffffffffffffffffffffffffffffffff167f3e22697b8c73d3349d4c96c42842b506a4f025921d2a1006eab4e8b3edde50a9836040516134c09190613ec4565b60405180910390a25050565b600860006134d86135c2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160149054906101000a900460ff16613562576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161355990614666565b60405180910390fd5b600061356c6135c2565b905081600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040190816135bd9190614857565b505050565b600080600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036136615733613663565b805b91505090565b613671613806565b73ffffffffffffffffffffffffffffffffffffffff1661368f61296c565b73ffffffffffffffffffffffffffffffffffffffff16146136ee576136b2613806565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016136e59190614025565b60405180910390fd5b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6002600054036137f2576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600081905550565b6001600081905550565b600033905090565b508054600082559060005260206000209081019061382c91906138fb565b50565b828054828255906000526020600020908101928215613877579160200282015b828111156138765782518290816138669190614857565b509160200191906001019061384f565b5b50905061388491906138fb565b5090565b60405180610100016040528060608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600015158152602001606081526020016060815260200160608152602001606081525090565b5b8082111561391b5760008181613912919061391f565b506001016138fc565b5090565b50805461392b906145e9565b6000825580601f1061393d575061395c565b601f01602090049060005260206000209081019061395b919061395f565b5b50565b5b80821115613978576000816000905550600101613960565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6139a381613990565b81146139ae57600080fd5b50565b6000813590506139c08161399a565b92915050565b6000602082840312156139dc576139db613986565b5b60006139ea848285016139b1565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613a1e826139f3565b9050919050565b613a2e81613a13565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613a6e578082015181840152602081019050613a53565b60008484015250505050565b6000601f19601f8301169050919050565b6000613a9682613a34565b613aa08185613a3f565b9350613ab0818560208601613a50565b613ab981613a7a565b840191505092915050565b613acd81613990565b82525050565b600060e082019050613ae8600083018a613a25565b8181036020830152613afa8189613a8b565b90508181036040830152613b0e8188613a8b565b9050613b1d6060830187613ac4565b613b2a6080830186613ac4565b613b3760a0830185613ac4565b613b4460c0830184613ac4565b98975050505050505050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613b8d82613a7a565b810181811067ffffffffffffffff82111715613bac57613bab613b55565b5b80604052505050565b6000613bbf61397c565b9050613bcb8282613b84565b919050565b600067ffffffffffffffff821115613beb57613bea613b55565b5b602082029050602081019050919050565b600080fd5b600080fd5b600067ffffffffffffffff821115613c2157613c20613b55565b5b613c2a82613a7a565b9050602081019050919050565b82818337600083830152505050565b6000613c59613c5484613c06565b613bb5565b905082815260208101848484011115613c7557613c74613c01565b5b613c80848285613c37565b509392505050565b600082601f830112613c9d57613c9c613b50565b5b8135613cad848260208601613c46565b91505092915050565b6000613cc9613cc484613bd0565b613bb5565b90508083825260208201905060208402830185811115613cec57613ceb613bfc565b5b835b81811015613d3357803567ffffffffffffffff811115613d1157613d10613b50565b5b808601613d1e8982613c88565b85526020850194505050602081019050613cee565b5050509392505050565b600082601f830112613d5257613d51613b50565b5b8135613d62848260208601613cb6565b91505092915050565b600060208284031215613d8157613d80613986565b5b600082013567ffffffffffffffff811115613d9f57613d9e61398b565b5b613dab84828501613d3d565b91505092915050565b613dbd81613a13565b8114613dc857600080fd5b50565b600081359050613dda81613db4565b92915050565b60008060408385031215613df757613df6613986565b5b6000613e0585828601613dcb565b925050602083013567ffffffffffffffff811115613e2657613e2561398b565b5b613e3285828601613c88565b9150509250929050565b600060208284031215613e5257613e51613986565b5b6000613e6084828501613dcb565b91505092915050565b6000602082019050613e7e6000830184613ac4565b92915050565b60008060408385031215613e9b57613e9a613986565b5b6000613ea985828601613dcb565b9250506020613eba858286016139b1565b9150509250929050565b60006020820190508181036000830152613ede8184613a8b565b905092915050565b60008060408385031215613efd57613efc613986565b5b600083013567ffffffffffffffff811115613f1b57613f1a61398b565b5b613f2785828601613c88565b925050602083013567ffffffffffffffff811115613f4857613f4761398b565b5b613f5485828601613c88565b9150509250929050565b600060208284031215613f7457613f73613986565b5b600082013567ffffffffffffffff811115613f9257613f9161398b565b5b613f9e84828501613c88565b91505092915050565b60008060408385031215613fbe57613fbd613986565b5b6000613fcc858286016139b1565b9250506020613fdd858286016139b1565b9150509250929050565b6000606082019050613ffc6000830186613a25565b818103602083015261400e8185613a8b565b905061401d6040830184613ac4565b949350505050565b600060208201905061403a6000830184613a25565b92915050565b60006060820190506140556000830186613ac4565b6140626020830185613ac4565b61406f6040830184613ac4565b949350505050565b6000819050919050565b600061409c614097614092846139f3565b614077565b6139f3565b9050919050565b60006140ae82614081565b9050919050565b60006140c0826140a3565b9050919050565b6140d0816140b5565b82525050565b60006020820190506140eb60008301846140c7565b92915050565b600082825260208201905092915050565b600061410d82613a34565b61411781856140f1565b9350614127818560208601613a50565b61413081613a7a565b840191505092915050565b61414481613a13565b82525050565b60008115159050919050565b61415f8161414a565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600061419d8383614102565b905092915050565b6000602082019050919050565b60006141bd82614165565b6141c78185614170565b9350836020820285016141d985614181565b8060005b8581101561421557848403895281516141f68582614191565b9450614201836141a5565b925060208a019950506001810190506141dd565b50829750879550505050505092915050565b60006101008301600083015184820360008601526142458282614102565b915050602083015161425a602086018261413b565b50604083015161426d604086018261413b565b5060608301516142806060860182614156565b50608083015184820360808601526142988282614102565b91505060a083015184820360a08601526142b28282614102565b91505060c083015184820360c08601526142cc8282614102565b91505060e083015184820360e08601526142e682826141b2565b9150508091505092915050565b6000602082019050818103600083015261430d8184614227565b905092915050565b600080600080600060a0868803121561433157614330613986565b5b600086013567ffffffffffffffff81111561434f5761434e61398b565b5b61435b88828901613c88565b955050602086013567ffffffffffffffff81111561437c5761437b61398b565b5b61438888828901613c88565b945050604086013567ffffffffffffffff8111156143a9576143a861398b565b5b6143b588828901613c88565b935050606086013567ffffffffffffffff8111156143d6576143d561398b565b5b6143e288828901613c88565b925050608086013567ffffffffffffffff8111156144035761440261398b565b5b61440f88828901613d3d565b9150509295509295909350565b600082825260208201905092915050565b600061443882614165565b614442818561441c565b93508360208202850161445485614181565b8060005b8581101561449057848403895281516144718582614191565b945061447c836141a5565b925060208a01995050600181019050614458565b50829750879550505050505092915050565b600060208201905081810360008301526144bc818461442d565b905092915050565b6144cd8161414a565b82525050565b600060e08201905081810360008301526144ed818a613a8b565b90506144fc6020830189613a25565b6145096040830188613a25565b61451660608301876144c4565b81810360808301526145288186613a8b565b905081810360a083015261453c8185613a8b565b905081810360c08301526145508184613a8b565b905098975050505050505050565b6000806040838503121561457557614574613986565b5b6000614583858286016139b1565b925050602083013567ffffffffffffffff8111156145a4576145a361398b565b5b6145b085828601613c88565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061460157607f821691505b602082108103614614576146136145ba565b5b50919050565b7f55736572206973206e6f74207265676973746572656400000000000000000000600082015250565b6000614650601683613a3f565b915061465b8261461a565b602082019050919050565b6000602082019050818103600083015261467f81614643565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026147177fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826146da565b61472186836146da565b95508019841693508086168417925050509392505050565b600061475461474f61474a84613990565b614077565b613990565b9050919050565b6000819050919050565b61476e83614739565b61478261477a8261475b565b8484546146e7565b825550505050565b600090565b61479761478a565b6147a2818484614765565b505050565b5b818110156147c6576147bb60008261478f565b6001810190506147a8565b5050565b601f82111561480b576147dc816146b5565b6147e5846146ca565b810160208510156147f4578190505b614808614800856146ca565b8301826147a7565b50505b505050565b600082821c905092915050565b600061482e60001984600802614810565b1980831691505092915050565b6000614847838361481d565b9150826002028217905092915050565b61486082613a34565b67ffffffffffffffff81111561487957614878613b55565b5b61488382546145e9565b61488e8282856147ca565b600060209050601f8311600181146148c157600084156148af578287015190505b6148b9858261483b565b865550614921565b601f1984166148cf866146b5565b60005b828110156148f7578489015182556001820191506020850194506020810190506148d2565b868310156149145784890151614910601f89168261481d565b8355505b6001600288020188555050505b505050505050565b7f5573657220697320616c72656164792072656769737465726564000000000000600082015250565b600061495f601a83613a3f565b915061496a82614929565b602082019050919050565b6000602082019050818103600083015261498e81614952565b9050919050565b7f557365726e616d652073686f756c64206e6f7420626520656d70747900000000600082015250565b60006149cb601c83613a3f565b91506149d682614995565b602082019050919050565b600060208201905081810360008301526149fa816149be565b9050919050565b6000604082019050614a166000830185613a25565b614a236020830184613ac4565b9392505050565b614a338161414a565b8114614a3e57600080fd5b50565b600081519050614a5081614a2a565b92915050565b600060208284031215614a6c57614a6b613986565b5b6000614a7a84828501614a41565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614abd82613990565b915060008203614ad057614acf614a83565b5b600182039050919050565b6000606082019050614af06000830186613a25565b614afd6020830185613a25565b614b0a6040830184613ac4565b949350505050565b7f5061796d656e74206661696c6564000000000000000000000000000000000000600082015250565b6000614b48600e83613a3f565b9150614b5382614b12565b602082019050919050565b60006020820190508181036000830152614b7781614b3b565b9050919050565b7f436f6e74656e742073686f756c64206e6f7420626520656d7074790000000000600082015250565b6000614bb4601b83613a3f565b9150614bbf82614b7e565b602082019050919050565b60006020820190508181036000830152614be381614ba7565b9050919050565b6000614bf582613990565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614c2757614c26614a83565b5b600182019050919050565b60006060820190508181036000830152614c4c8186613a8b565b90508181036020830152614c608185613a8b565b9050614c6f6040830184613ac4565b949350505050565b7f506f737420646f6573206e6f7420657869737400000000000000000000000000600082015250565b6000614cad601383613a3f565b9150614cb882614c77565b602082019050919050565b60006020820190508181036000830152614cdc81614ca0565b9050919050565b7f436f6d6d656e7420646f6573206e6f7420657869737400000000000000000000600082015250565b6000614d19601683613a3f565b9150614d2482614ce3565b602082019050919050565b60006020820190508181036000830152614d4881614d0c565b9050919050565b7f55736572206e6f7420666f756e64000000000000000000000000000000000000600082015250565b6000614d85600e83613a3f565b9150614d9082614d4f565b602082019050919050565b60006020820190508181036000830152614db481614d78565b9050919050565b7f557365726e616d652063616e6e6f7420626520656d7074790000000000000000600082015250565b6000614df1601883613a3f565b9150614dfc82614dbb565b602082019050919050565b60006020820190508181036000830152614e2081614de4565b9050919050565b7f557365722068617320616c7265616479206c696b6564207468697320706f7374600082015250565b6000614e5d602083613a3f565b9150614e6882614e27565b602082019050919050565b60006020820190508181036000830152614e8c81614e50565b9050919050565b6000819050919050565b6000614eb8614eb3614eae84614e93565b614077565b613990565b9050919050565b614ec881614e9d565b82525050565b6000604082019050614ee36000830185613a25565b614ef06020830184614ebf565b9392505050565b600081519050614f068161399a565b92915050565b600060208284031215614f2257614f21613986565b5b6000614f3084828501614ef7565b91505092915050565b7f436f6d6d656e742073686f756c64206e6f7420626520656d7074790000000000600082015250565b6000614f6f601b83613a3f565b9150614f7a82614f39565b602082019050919050565b60006020820190508181036000830152614f9e81614f62565b9050919050565b60006040820190508181036000830152614fbf8185613a8b565b9050614fce6020830184613ac4565b9392505050565b7f4f726967696e616c20706f737420646f6573206e6f7420657869737400000000600082015250565b600061500b601c83613a3f565b915061501682614fd5565b602082019050919050565b6000602082019050818103600083015261503a81614ffe565b9050919050565b600081549050615050816145e9565b9050919050565b60008190508160005260206000209050919050565b81810361507a575050615152565b61508382615041565b67ffffffffffffffff81111561509c5761509b613b55565b5b6150a682546145e9565b6150b18282856147ca565b6000601f8311600181146150e057600084156150ce578287015490505b6150d8858261483b565b86555061514b565b601f1984166150ee87615057565b96506150f9866146b5565b60005b82811015615121578489015482556001820191506001850194506020810190506150fc565b8683101561513e578489015461513a601f89168261481d565b8355505b6001600288020188555050505b5050505050505b565b600061515f82613990565b915061516a83613990565b925082820390508181111561518257615181614a83565b5b92915050565b600060408201905061519d6000830185613ac4565b6151aa6020830184613ac4565b939250505056fea2646970667358221220653baf9cb42e61b3b6397f7fafc11c799dc414cfb1164ef862b341240883ec8b64736f6c634300081c0033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 266,
        "contract": "contracts/Chainchat.sol:Chainchat",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 8,
        "contract": "contracts/Chainchat.sol:Chainchat",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 336,
        "contract": "contracts/Chainchat.sol:Chainchat",
        "label": "ccToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)225"
      },
      {
        "astId": 387,
        "contract": "contracts/Chainchat.sol:Chainchat",
        "label": "postCost",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 394,
        "contract": "contracts/Chainchat.sol:Chainchat",
        "label": "commentCost",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 401,
        "contract": "contracts/Chainchat.sol:Chainchat",
        "label": "signupBonus",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 408,
        "contract": "contracts/Chainchat.sol:Chainchat",
        "label": "referralBonus",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 411,
        "contract": "contracts/Chainchat.sol:Chainchat",
        "label": "interests",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 416,
        "contract": "contracts/Chainchat.sol:Chainchat",
        "label": "users",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(User)354_storage)"
      },
      {
        "astId": 420,
        "contract": "contracts/Chainchat.sol:Chainchat",
        "label": "walletToCreator",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 424,
        "contract": "contracts/Chainchat.sol:Chainchat",
        "label": "freePostsRemaining",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 428,
        "contract": "contracts/Chainchat.sol:Chainchat",
        "label": "referrers",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 432,
        "contract": "contracts/Chainchat.sol:Chainchat",
        "label": "referralCount",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 439,
        "contract": "contracts/Chainchat.sol:Chainchat",
        "label": "postComments",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Comment)380_storage))"
      },
      {
        "astId": 443,
        "contract": "contracts/Chainchat.sol:Chainchat",
        "label": "postCommentsCount",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 448,
        "contract": "contracts/Chainchat.sol:Chainchat",
        "label": "userInterests",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_array(t_string_storage)dyn_storage)"
      },
      {
        "astId": 452,
        "contract": "contracts/Chainchat.sol:Chainchat",
        "label": "userPostCount",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 456,
        "contract": "contracts/Chainchat.sol:Chainchat",
        "label": "userLikeCount",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 460,
        "contract": "contracts/Chainchat.sol:Chainchat",
        "label": "userCommentCount",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 464,
        "contract": "contracts/Chainchat.sol:Chainchat",
        "label": "posts",
        "offset": 0,
        "slot": "19",
        "type": "t_array(t_struct(Post)373_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Post)373_storage)dyn_storage": {
        "base": "t_struct(Post)373_storage",
        "encoding": "dynamic_array",
        "label": "struct Chainchat.Post[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)225": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_string_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string[])",
        "numberOfBytes": "32",
        "value": "t_array(t_string_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(User)354_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Chainchat.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)354_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Comment)380_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct Chainchat.Comment))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Comment)380_storage)"
      },
      "t_mapping(t_uint256,t_struct(Comment)380_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Chainchat.Comment)",
        "numberOfBytes": "32",
        "value": "t_struct(Comment)380_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Comment)380_storage": {
        "encoding": "inplace",
        "label": "struct Chainchat.Comment",
        "members": [
          {
            "astId": 375,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "commenter",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 377,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "content",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 379,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "timestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Post)373_storage": {
        "encoding": "inplace",
        "label": "struct Chainchat.Post",
        "members": [
          {
            "astId": 356,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "author",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 358,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "content",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 360,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "image",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 362,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "timestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 364,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "likes",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 366,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "commentsCount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 368,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "originalPostId",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 372,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "likedBy",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(User)354_storage": {
        "encoding": "inplace",
        "label": "struct Chainchat.User",
        "members": [
          {
            "astId": 338,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "username",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 340,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "userAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 342,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "sender",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 344,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "isRegistered",
            "offset": 20,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 346,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "profileImage",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 348,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "bio",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 350,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "coverPhoto",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 353,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "interests",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_string_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}