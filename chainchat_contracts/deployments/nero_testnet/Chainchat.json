{
  "address": "0x18c42E601DB5d48Cb3A7e8fC7905d4540447474a",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "commenter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "postId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "content",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "CommentAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "content",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "image",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PostCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "liker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "postId",
          "type": "uint256"
        }
      ],
      "name": "PostLiked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sharer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "originalPostId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPostId",
          "type": "uint256"
        }
      ],
      "name": "PostShared",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "image",
          "type": "string"
        }
      ],
      "name": "ProfileImageUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "username",
          "type": "string"
        }
      ],
      "name": "UserRegistered",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_postId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_content",
          "type": "string"
        }
      ],
      "name": "addComment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_content",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_image",
          "type": "string"
        }
      ],
      "name": "createPost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_postId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_commentId",
          "type": "uint256"
        }
      ],
      "name": "getComment",
      "outputs": [
        {
          "internalType": "address",
          "name": "commenter",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "content",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_postId",
          "type": "uint256"
        }
      ],
      "name": "getPost",
      "outputs": [
        {
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "content",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "image",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "likes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "commentsCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "originalPostId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPostsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "getUserByAddress",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "username",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "userAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isRegistered",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "profileImage",
              "type": "string"
            }
          ],
          "internalType": "struct Chainchat.User",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_postId",
          "type": "uint256"
        }
      ],
      "name": "likePost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "postComments",
      "outputs": [
        {
          "internalType": "address",
          "name": "commenter",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "content",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "postCommentsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "posts",
      "outputs": [
        {
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "content",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "image",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "likes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "commentsCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "originalPostId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_username",
          "type": "string"
        }
      ],
      "name": "registerUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_image",
          "type": "string"
        }
      ],
      "name": "setProfileImage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_postId",
          "type": "uint256"
        }
      ],
      "name": "sharePost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "string",
          "name": "username",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isRegistered",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "profileImage",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x60904b0dd774ed938fe87ce2fed09eab6d1aba0b119de4b121969d3ef4f0f25b",
  "receipt": {
    "to": null,
    "from": "0x9409C4AB1163037027c91B47893632174d46e6BA",
    "contractAddress": "0x18c42E601DB5d48Cb3A7e8fC7905d4540447474a",
    "transactionIndex": 0,
    "gasUsed": "2612680",
    "logsBloom": "0x
    "blockHash": "0x6d3cd96395a0c1b45ac767be6cc581ae16db6fe1b14a3461f120653d6e666033",
    "transactionHash": "0x60904b0dd774ed938fe87ce2fed09eab6d1aba0b119de4b121969d3ef4f0f25b",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 6976010,
        "transactionHash": "0x60904b0dd774ed938fe87ce2fed09eab6d1aba0b119de4b121969d3ef4f0f25b",
        "address": "0x18c42E601DB5d48Cb3A7e8fC7905d4540447474a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009409c4ab1163037027c91b47893632174d46e6ba"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x6d3cd96395a0c1b45ac767be6cc581ae16db6fe1b14a3461f120653d6e666033"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 6976010,
        "transactionHash": "0x60904b0dd774ed938fe87ce2fed09eab6d1aba0b119de4b121969d3ef4f0f25b",
        "address": "0x18c42E601DB5d48Cb3A7e8fC7905d4540447474a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000009409c4ab1163037027c91b47893632174d46e6ba",
          "0x0000000000000000000000009409c4ab1163037027c91b47893632174d46e6ba"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x6d3cd96395a0c1b45ac767be6cc581ae16db6fe1b14a3461f120653d6e666033"
      }
    ],
    "blockNumber": 6976010,
    "cumulativeGasUsed": "2612680",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "518a783bdeed903ea00efecf267aeb89",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"commenter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"CommentAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PostCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"}],\"name\":\"PostLiked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sharer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originalPostId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPostId\",\"type\":\"uint256\"}],\"name\":\"PostShared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"}],\"name\":\"ProfileImageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"}],\"name\":\"UserRegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_postId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_content\",\"type\":\"string\"}],\"name\":\"addComment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_content\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_image\",\"type\":\"string\"}],\"name\":\"createPost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_postId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_commentId\",\"type\":\"uint256\"}],\"name\":\"getComment\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"commenter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_postId\",\"type\":\"uint256\"}],\"name\":\"getPost\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"likes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commentsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originalPostId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPostsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getUserByAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"profileImage\",\"type\":\"string\"}],\"internalType\":\"struct Chainchat.User\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_postId\",\"type\":\"uint256\"}],\"name\":\"likePost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"postComments\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"commenter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"postCommentsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"posts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"likes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commentsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originalPostId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_username\",\"type\":\"string\"}],\"name\":\"registerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_image\",\"type\":\"string\"}],\"name\":\"setProfileImage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_postId\",\"type\":\"uint256\"}],\"name\":\"sharePost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"profileImage\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createPost(string,string)\":{\"notice\":\"Creates a new post, optionally with an image\"},\"getPost(uint256)\":{\"notice\":\"Returns post data, including new image and originalPostId fields\"},\"setProfileImage(string)\":{\"notice\":\"Sets or updates the user's profile picture\"},\"sharePost(uint256)\":{\"notice\":\"Shares an existing post\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Chainchat.sol\":\"Chainchat\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"contracts/Chainchat.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Chainchat is ReentrancyGuard, Ownable {\\n    /**\\n     * @dev Struct representing a user in the dApp.\\n     * @param username The username of the user.\\n     * @param userAddress The address of the user.\\n     * @param isRegistered A boolean indicating if the user is registered.\\n     * @param profileImage The image URL or IPFS hash for the user's profile picture.\\n     */\\n    struct User {\\n        string username;\\n        address userAddress;\\n        bool isRegistered;\\n        string profileImage; // New field: profile picture\\n    }\\n\\n    mapping(address => User) public users;\\n\\n    /**\\n     * @dev Struct representing a post in the dApp.\\n     * @param author The address of the user who created the post.\\n     * @param content The content of the post.\\n     * @param image The optional image URL or IPFS hash attached to the post.\\n     * @param timestamp The time when the post was created.\\n     * @param likes The number of likes the post has received.\\n     * @param commentsCount The number of comments on the post.\\n     * @param originalPostId The ID of the post being shared (0 for original posts).\\n     * @param likedBy A mapping to track if a user has liked the post.\\n     */\\n    struct Post {\\n        address author;\\n        string content;\\n        string image; // New field: image URL or IPFS hash\\n        uint256 timestamp;\\n        uint256 likes;\\n        uint256 commentsCount;\\n        uint256 originalPostId; // New field: shared post reference\\n        mapping(address => bool) likedBy;\\n    }\\n\\n    struct Comment {\\n        address commenter;\\n        string content;\\n        uint256 timestamp;\\n    }\\n\\n    mapping(uint256 => mapping(uint256 => Comment)) public postComments;\\n    mapping(uint256 => uint256) public postCommentsCount;\\n\\n    Post[] public posts;\\n\\n    event UserRegistered(address indexed userAddress, string username);\\n    event ProfileImageUpdated(address indexed userAddress, string image);\\n    event PostCreated(address indexed author, string content, string image, uint256 timestamp);\\n    event PostShared(address indexed sharer, uint256 originalPostId, uint256 newPostId);\\n    event PostLiked(address indexed liker, uint256 indexed postId);\\n    event CommentAdded(address indexed commenter, uint256 indexed postId, string content, uint256 timestamp);\\n\\n    modifier onlyRegisteredUser() {\\n        require(users[msg.sender].isRegistered, \\\"User is not registered\\\");\\n        _;\\n    }\\n\\n    constructor() Ownable(msg.sender) {\\n        transferOwnership(msg.sender);\\n    }\\n\\n    function registerUser(string memory _username) external {\\n        require(!users[msg.sender].isRegistered, \\\"User is already registered\\\");\\n        require(bytes(_username).length > 0, \\\"Username should not be empty\\\");\\n\\n        users[msg.sender] = User({\\n            username: _username,\\n            userAddress: msg.sender,\\n            isRegistered: true,\\n            profileImage: \\\"\\\"\\n        });\\n\\n        emit UserRegistered(msg.sender, _username);\\n    }\\n\\n    /// @notice Sets or updates the user's profile picture\\n    function setProfileImage(string memory _image) external onlyRegisteredUser {\\n        users[msg.sender].profileImage = _image;\\n        emit ProfileImageUpdated(msg.sender, _image);\\n    }\\n\\n    function getUserByAddress(address _userAddress) external view returns (User memory) {\\n        require(users[_userAddress].isRegistered, \\\"User not found\\\");\\n        return users[_userAddress];\\n    }\\n\\n    /// @notice Creates a new post, optionally with an image\\n    function createPost(string memory _content, string memory _image) external onlyRegisteredUser {\\n        require(bytes(_content).length > 0, \\\"Content should not be empty\\\");\\n\\n        Post storage newPost = posts.push();\\n        newPost.author = msg.sender;\\n        newPost.content = _content;\\n        newPost.image = _image;\\n        newPost.timestamp = block.timestamp;\\n        newPost.originalPostId = 0;\\n\\n        emit PostCreated(msg.sender, _content, _image, block.timestamp);\\n    }\\n\\n    /// @notice Shares an existing post\\n    function sharePost(uint256 _postId) external onlyRegisteredUser {\\n        require(_postId < posts.length, \\\"Original post does not exist\\\");\\n\\n        Post storage sharedPost = posts.push();\\n        sharedPost.author = msg.sender;\\n        sharedPost.content = posts[_postId].content;\\n        sharedPost.image = posts[_postId].image;\\n        sharedPost.timestamp = block.timestamp;\\n        sharedPost.originalPostId = _postId;\\n\\n        emit PostShared(msg.sender, _postId, posts.length - 1);\\n    }\\n\\n    function likePost(uint256 _postId) external onlyRegisteredUser nonReentrant {\\n        require(_postId < posts.length, \\\"Post does not exist\\\");\\n\\n        Post storage post = posts[_postId];\\n        require(!post.likedBy[msg.sender], \\\"User has already liked this post\\\");\\n\\n        post.likes++;\\n        post.likedBy[msg.sender] = true;\\n\\n        emit PostLiked(msg.sender, _postId);\\n    }\\n\\n    function addComment(uint256 _postId, string memory _content) external onlyRegisteredUser nonReentrant {\\n        require(_postId < posts.length, \\\"Post does not exist\\\");\\n        require(bytes(_content).length > 0, \\\"Comment should not be empty\\\");\\n\\n        uint256 commentId = postCommentsCount[_postId];\\n        postComments[_postId][commentId] = Comment({\\n            commenter: msg.sender,\\n            content: _content,\\n            timestamp: block.timestamp\\n        });\\n\\n        postCommentsCount[_postId]++;\\n        posts[_postId].commentsCount++;\\n\\n        emit CommentAdded(msg.sender, _postId, _content, block.timestamp);\\n    }\\n\\n    function getPostsCount() external view returns (uint256) {\\n        return posts.length;\\n    }\\n\\n    /// @notice Returns post data, including new image and originalPostId fields\\n    function getPost(uint256 _postId) external view returns (\\n        address author,\\n        string memory content,\\n        string memory image,\\n        uint256 timestamp,\\n        uint256 likes,\\n        uint256 commentsCount,\\n        uint256 originalPostId\\n    ) {\\n        require(_postId < posts.length, \\\"Post does not exist\\\");\\n        Post storage post = posts[_postId];\\n        return (post.author, post.content, post.image, post.timestamp, post.likes, post.commentsCount, post.originalPostId);\\n    }\\n\\n    function getComment(uint256 _postId, uint256 _commentId) external view returns (\\n        address commenter,\\n        string memory content,\\n        uint256 timestamp\\n    ) {\\n        require(_postId < posts.length, \\\"Post does not exist\\\");\\n        require(_commentId < postCommentsCount[_postId], \\\"Comment does not exist\\\");\\n\\n        Comment memory comment = postComments[_postId][_commentId];\\n        return (comment.commenter, comment.content, comment.timestamp);\\n    }\\n}\\n\",\"keccak256\":\"0x25663b2f2a955ea06372370f0110f9176a479c62cff269c7294ed244166acded\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50336001600081905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361008c5760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016100839190610314565b60405180910390fd5b61009b816100b060201b60201c565b506100ab3361017660201b60201c565b61032f565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61018461020860201b60201c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036101f65760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016101ed9190610314565b60405180910390fd5b610205816100b060201b60201c565b50565b6102166102a160201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1661023a6102a960201b60201c565b73ffffffffffffffffffffffffffffffffffffffff161461029f576102636102a160201b60201c565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016102969190610314565b60405180910390fd5b565b600033905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102fe826102d3565b9050919050565b61030e816102f3565b82525050565b60006020820190506103296000830184610305565b92915050565b612d608061033e6000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c8063725009d3116100a2578063aa7e568311610071578063aa7e5683146102dd578063d82d72bf146102f9578063f2fde38b14610329578063f5d7632014610345578063f70d205c146103615761010b565b8063725009d314610252578063836248821461026e5780638da5cb5b1461028c578063a87430ba146102aa5761010b565b80635193c94c116100de5780635193c94c146101ca57806369c212f6146101fc578063704f1b941461022c578063715018a6146102485761010b565b80630b1e7f8314610110578063392338f51461014657806340731c24146101625780634889275314610198575b600080fd5b61012a60048036038101906101259190611d1c565b61037d565b60405161013d9796959493929190611e29565b60405180910390f35b610160600480360381019061015b9190611fdb565b6104ff565b005b61017c60048036038101906101779190611d1c565b6106c7565b60405161018f9796959493929190611e29565b60405180910390f35b6101b260048036038101906101ad9190612053565b6108b2565b6040516101c193929190612093565b60405180910390f35b6101e460048036038101906101df9190612053565b610a96565b6040516101f393929190612093565b60405180910390f35b610216600480360381019061021191906120fd565b610b75565b6040516102239190612208565b60405180910390f35b6102466004803603810190610241919061222a565b610df2565b005b610250611035565b005b61026c60048036038101906102679190611d1c565b611049565b005b6102766112a0565b6040516102839190612273565b60405180910390f35b6102946112ad565b6040516102a1919061228e565b60405180910390f35b6102c460048036038101906102bf91906120fd565b6112d7565b6040516102d494939291906122b8565b60405180910390f35b6102f760048036038101906102f2919061230b565b611444565b005b610313600480360381019061030e9190611d1c565b6116ff565b6040516103209190612273565b60405180910390f35b610343600480360381019061033e91906120fd565b611717565b005b61035f600480360381019061035a9190611d1c565b61179d565b005b61037b6004803603810190610376919061222a565b6119bd565b005b6005818154811061038d57600080fd5b90600052602060002090600802016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010180546103d690612396565b80601f016020809104026020016040519081016040528092919081815260200182805461040290612396565b801561044f5780601f106104245761010080835404028352916020019161044f565b820191906000526020600020905b81548152906001019060200180831161043257829003601f168201915b50505050509080600201805461046490612396565b80601f016020809104026020016040519081016040528092919081815260200182805461049090612396565b80156104dd5780601f106104b2576101008083540402835291602001916104dd565b820191906000526020600020905b8154815290600101906020018083116104c057829003601f168201915b5050505050908060030154908060040154908060050154908060060154905087565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160149054906101000a900460ff1661058e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058590612413565b60405180910390fd5b60008251116105d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c99061247f565b60405180910390fd5b600060056001816001815401808255809150500390600052602060002090600802019050338160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508281600101908161064a919061264b565b508181600201908161065c919061264b565b50428160030181905550600081600601819055503373ffffffffffffffffffffffffffffffffffffffff167f4dc899ab633bbd3c97004820698910906a6748451e00b59a3e011358dc2f9fb58484426040516106ba9392919061271d565b60405180910390a2505050565b60006060806000806000806005805490508810610719576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610710906127ae565b60405180910390fd5b60006005898154811061072f5761072e6127ce565b5b906000526020600020906008020190508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010182600201836003015484600401548560050154866006015485805461078c90612396565b80601f01602080910402602001604051908101604052809291908181526020018280546107b890612396565b80156108055780601f106107da57610100808354040283529160200191610805565b820191906000526020600020905b8154815290600101906020018083116107e857829003601f168201915b5050505050955084805461081890612396565b80601f016020809104026020016040519081016040528092919081815260200182805461084490612396565b80156108915780601f1061086657610100808354040283529160200191610891565b820191906000526020600020905b81548152906001019060200180831161087457829003601f168201915b50505050509450975097509750975097509750975050919395979092949650565b60006060600060058054905085106108ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f6906127ae565b60405180910390fd5b60046000868152602001908152602001600020548410610954576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094b90612849565b60405180910390fd5b60006003600087815260200190815260200160002060008681526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180546109eb90612396565b80601f0160208091040260200160405190810160405280929190818152602001828054610a1790612396565b8015610a645780601f10610a3957610100808354040283529160200191610a64565b820191906000526020600020905b815481529060010190602001808311610a4757829003601f168201915b505050505081526020016002820154815250509050806000015181602001518260400151935093509350509250925092565b6003602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001018054610aec90612396565b80601f0160208091040260200160405190810160405280929190818152602001828054610b1890612396565b8015610b655780601f10610b3a57610100808354040283529160200191610b65565b820191906000526020600020905b815481529060010190602001808311610b4857829003601f168201915b5050505050908060020154905083565b610b7d611c92565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160149054906101000a900460ff16610c0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c03906128b5565b60405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806080016040529081600082018054610c6690612396565b80601f0160208091040260200160405190810160405280929190818152602001828054610c9290612396565b8015610cdf5780601f10610cb457610100808354040283529160200191610cdf565b820191906000526020600020905b815481529060010190602001808311610cc257829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900460ff16151515158152602001600282018054610d6990612396565b80601f0160208091040260200160405190810160405280929190818152602001828054610d9590612396565b8015610de25780601f10610db757610100808354040283529160200191610de2565b820191906000526020600020905b815481529060010190602001808311610dc557829003601f168201915b5050505050815250509050919050565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160149054906101000a900460ff1615610e82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7990612921565b60405180910390fd5b6000815111610ec6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ebd9061298d565b60405180910390fd5b60405180608001604052808281526020013373ffffffffffffffffffffffffffffffffffffffff16815260200160011515815260200160405180602001604052806000815250815250600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000019081610f63919061264b565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff0219169083151502179055506060820151816002019081610fe0919061264b565b509050503373ffffffffffffffffffffffffffffffffffffffff167f48cac28ad4dc618e15f4c2dd5e97751182f166de97b25618318b2112aa951a2f8260405161102a91906129ad565b60405180910390a250565b61103d611aed565b6110476000611b74565b565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160149054906101000a900460ff166110d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110cf90612413565b60405180910390fd5b6110e0611c3a565b6005805490508110611127576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111e906127ae565b60405180910390fd5b60006005828154811061113d5761113c6127ce565b5b906000526020600020906008020190508060070160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156111dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d390612a1b565b60405180910390fd5b8060040160008154809291906111f190612a6a565b919050555060018160070160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550813373ffffffffffffffffffffffffffffffffffffffff167f62500381f39eb6f48b6e6f104021ceeaca9e5354918dc17b4a15bf87c5f5d28b60405160405180910390a35061129d611c80565b50565b6000600580549050905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60026020528060005260406000206000915090508060000180546112fa90612396565b80601f016020809104026020016040519081016040528092919081815260200182805461132690612396565b80156113735780601f1061134857610100808354040283529160200191611373565b820191906000526020600020905b81548152906001019060200180831161135657829003601f168201915b5050505050908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160149054906101000a900460ff16908060020180546113c190612396565b80601f01602080910402602001604051908101604052809291908181526020018280546113ed90612396565b801561143a5780601f1061140f5761010080835404028352916020019161143a565b820191906000526020600020905b81548152906001019060200180831161141d57829003601f168201915b5050505050905084565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160149054906101000a900460ff166114d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ca90612413565b60405180910390fd5b6114db611c3a565b6005805490508210611522576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611519906127ae565b60405180910390fd5b6000815111611566576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155d90612afe565b60405180910390fd5b60006004600084815260200190815260200160002054905060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018381526020014281525060036000858152602001908152602001600020600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101908161162f919061264b565b506040820151816002015590505060046000848152602001908152602001600020600081548092919061166190612a6a565b91905055506005838154811061167a576116796127ce565b5b9060005260206000209060080201600501600081548092919061169c90612a6a565b9190505550823373ffffffffffffffffffffffffffffffffffffffff167fdb68d60a2d5659f0528e369fe9a8cfdbec13beb23609aa9a7a5c2a2d973117e484426040516116ea929190612b1e565b60405180910390a3506116fb611c80565b5050565b60046020528060005260406000206000915090505481565b61171f611aed565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036117915760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401611788919061228e565b60405180910390fd5b61179a81611b74565b50565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160149054906101000a900460ff1661182c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161182390612413565b60405180910390fd5b6005805490508110611873576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186a90612b9a565b60405180910390fd5b600060056001816001815401808255809150500390600052602060002090600802019050338160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600582815481106118ee576118ed6127ce565b5b906000526020600020906008020160010181600101908161190f9190612be5565b5060058281548110611924576119236127ce565b5b90600052602060002090600802016002018160020190816119459190612be5565b504281600301819055508181600601819055503373ffffffffffffffffffffffffffffffffffffffff167f1c03620db49e9abd75c892c4d5777b171bbcba631506a2fd6078694a4455808c8360016005805490506119a39190612ccd565b6040516119b1929190612d01565b60405180910390a25050565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160149054906101000a900460ff16611a4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a4390612413565b60405180910390fd5b80600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002019081611a9b919061264b565b503373ffffffffffffffffffffffffffffffffffffffff167f3e22697b8c73d3349d4c96c42842b506a4f025921d2a1006eab4e8b3edde50a982604051611ae291906129ad565b60405180910390a250565b611af5611c8a565b73ffffffffffffffffffffffffffffffffffffffff16611b136112ad565b73ffffffffffffffffffffffffffffffffffffffff1614611b7257611b36611c8a565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401611b69919061228e565b60405180910390fd5b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600260005403611c76576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600081905550565b6001600081905550565b600033905090565b604051806080016040528060608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600015158152602001606081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b611cf981611ce6565b8114611d0457600080fd5b50565b600081359050611d1681611cf0565b92915050565b600060208284031215611d3257611d31611cdc565b5b6000611d4084828501611d07565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611d7482611d49565b9050919050565b611d8481611d69565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611dc4578082015181840152602081019050611da9565b60008484015250505050565b6000601f19601f8301169050919050565b6000611dec82611d8a565b611df68185611d95565b9350611e06818560208601611da6565b611e0f81611dd0565b840191505092915050565b611e2381611ce6565b82525050565b600060e082019050611e3e600083018a611d7b565b8181036020830152611e508189611de1565b90508181036040830152611e648188611de1565b9050611e736060830187611e1a565b611e806080830186611e1a565b611e8d60a0830185611e1a565b611e9a60c0830184611e1a565b98975050505050505050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611ee882611dd0565b810181811067ffffffffffffffff82111715611f0757611f06611eb0565b5b80604052505050565b6000611f1a611cd2565b9050611f268282611edf565b919050565b600067ffffffffffffffff821115611f4657611f45611eb0565b5b611f4f82611dd0565b9050602081019050919050565b82818337600083830152505050565b6000611f7e611f7984611f2b565b611f10565b905082815260208101848484011115611f9a57611f99611eab565b5b611fa5848285611f5c565b509392505050565b600082601f830112611fc257611fc1611ea6565b5b8135611fd2848260208601611f6b565b91505092915050565b60008060408385031215611ff257611ff1611cdc565b5b600083013567ffffffffffffffff8111156120105761200f611ce1565b5b61201c85828601611fad565b925050602083013567ffffffffffffffff81111561203d5761203c611ce1565b5b61204985828601611fad565b9150509250929050565b6000806040838503121561206a57612069611cdc565b5b600061207885828601611d07565b925050602061208985828601611d07565b9150509250929050565b60006060820190506120a86000830186611d7b565b81810360208301526120ba8185611de1565b90506120c96040830184611e1a565b949350505050565b6120da81611d69565b81146120e557600080fd5b50565b6000813590506120f7816120d1565b92915050565b60006020828403121561211357612112611cdc565b5b6000612121848285016120e8565b91505092915050565b600082825260208201905092915050565b600061214682611d8a565b612150818561212a565b9350612160818560208601611da6565b61216981611dd0565b840191505092915050565b61217d81611d69565b82525050565b60008115159050919050565b61219881612183565b82525050565b600060808301600083015184820360008601526121bb828261213b565b91505060208301516121d06020860182612174565b5060408301516121e3604086018261218f565b50606083015184820360608601526121fb828261213b565b9150508091505092915050565b60006020820190508181036000830152612222818461219e565b905092915050565b6000602082840312156122405761223f611cdc565b5b600082013567ffffffffffffffff81111561225e5761225d611ce1565b5b61226a84828501611fad565b91505092915050565b60006020820190506122886000830184611e1a565b92915050565b60006020820190506122a36000830184611d7b565b92915050565b6122b281612183565b82525050565b600060808201905081810360008301526122d28187611de1565b90506122e16020830186611d7b565b6122ee60408301856122a9565b81810360608301526123008184611de1565b905095945050505050565b6000806040838503121561232257612321611cdc565b5b600061233085828601611d07565b925050602083013567ffffffffffffffff81111561235157612350611ce1565b5b61235d85828601611fad565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806123ae57607f821691505b6020821081036123c1576123c0612367565b5b50919050565b7f55736572206973206e6f74207265676973746572656400000000000000000000600082015250565b60006123fd601683611d95565b9150612408826123c7565b602082019050919050565b6000602082019050818103600083015261242c816123f0565b9050919050565b7f436f6e74656e742073686f756c64206e6f7420626520656d7074790000000000600082015250565b6000612469601b83611d95565b915061247482612433565b602082019050919050565b600060208201905081810360008301526124988161245c565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026125017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826124c4565b61250b86836124c4565b95508019841693508086168417925050509392505050565b6000819050919050565b600061254861254361253e84611ce6565b612523565b611ce6565b9050919050565b6000819050919050565b6125628361252d565b61257661256e8261254f565b8484546124d1565b825550505050565b600090565b61258b61257e565b612596818484612559565b505050565b5b818110156125ba576125af600082612583565b60018101905061259c565b5050565b601f8211156125ff576125d08161249f565b6125d9846124b4565b810160208510156125e8578190505b6125fc6125f4856124b4565b83018261259b565b50505b505050565b600082821c905092915050565b600061262260001984600802612604565b1980831691505092915050565b600061263b8383612611565b9150826002028217905092915050565b61265482611d8a565b67ffffffffffffffff81111561266d5761266c611eb0565b5b6126778254612396565b6126828282856125be565b600060209050601f8311600181146126b557600084156126a3578287015190505b6126ad858261262f565b865550612715565b601f1984166126c38661249f565b60005b828110156126eb578489015182556001820191506020850194506020810190506126c6565b868310156127085784890151612704601f891682612611565b8355505b6001600288020188555050505b505050505050565b600060608201905081810360008301526127378186611de1565b9050818103602083015261274b8185611de1565b905061275a6040830184611e1a565b949350505050565b7f506f737420646f6573206e6f7420657869737400000000000000000000000000600082015250565b6000612798601383611d95565b91506127a382612762565b602082019050919050565b600060208201905081810360008301526127c78161278b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f436f6d6d656e7420646f6573206e6f7420657869737400000000000000000000600082015250565b6000612833601683611d95565b915061283e826127fd565b602082019050919050565b6000602082019050818103600083015261286281612826565b9050919050565b7f55736572206e6f7420666f756e64000000000000000000000000000000000000600082015250565b600061289f600e83611d95565b91506128aa82612869565b602082019050919050565b600060208201905081810360008301526128ce81612892565b9050919050565b7f5573657220697320616c72656164792072656769737465726564000000000000600082015250565b600061290b601a83611d95565b9150612916826128d5565b602082019050919050565b6000602082019050818103600083015261293a816128fe565b9050919050565b7f557365726e616d652073686f756c64206e6f7420626520656d70747900000000600082015250565b6000612977601c83611d95565b915061298282612941565b602082019050919050565b600060208201905081810360008301526129a68161296a565b9050919050565b600060208201905081810360008301526129c78184611de1565b905092915050565b7f557365722068617320616c7265616479206c696b6564207468697320706f7374600082015250565b6000612a05602083611d95565b9150612a10826129cf565b602082019050919050565b60006020820190508181036000830152612a34816129f8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612a7582611ce6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612aa757612aa6612a3b565b5b600182019050919050565b7f436f6d6d656e742073686f756c64206e6f7420626520656d7074790000000000600082015250565b6000612ae8601b83611d95565b9150612af382612ab2565b602082019050919050565b60006020820190508181036000830152612b1781612adb565b9050919050565b60006040820190508181036000830152612b388185611de1565b9050612b476020830184611e1a565b9392505050565b7f4f726967696e616c20706f737420646f6573206e6f7420657869737400000000600082015250565b6000612b84601c83611d95565b9150612b8f82612b4e565b602082019050919050565b60006020820190508181036000830152612bb381612b77565b9050919050565b600081549050612bc981612396565b9050919050565b60008190508160005260206000209050919050565b818103612bf3575050612ccb565b612bfc82612bba565b67ffffffffffffffff811115612c1557612c14611eb0565b5b612c1f8254612396565b612c2a8282856125be565b6000601f831160018114612c595760008415612c47578287015490505b612c51858261262f565b865550612cc4565b601f198416612c6787612bd0565b9650612c728661249f565b60005b82811015612c9a57848901548255600182019150600185019450602081019050612c75565b86831015612cb75784890154612cb3601f891682612611565b8355505b6001600288020188555050505b5050505050505b565b6000612cd882611ce6565b9150612ce383611ce6565b9250828203905081811115612cfb57612cfa612a3b565b5b92915050565b6000604082019050612d166000830185611e1a565b612d236020830184611e1a565b939250505056fea2646970667358221220b2eeb5dde5b2c228a3baedca42b72634b510cdd8cc94b393bcdfcfdd8511109a64736f6c634300081c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c8063725009d3116100a2578063aa7e568311610071578063aa7e5683146102dd578063d82d72bf146102f9578063f2fde38b14610329578063f5d7632014610345578063f70d205c146103615761010b565b8063725009d314610252578063836248821461026e5780638da5cb5b1461028c578063a87430ba146102aa5761010b565b80635193c94c116100de5780635193c94c146101ca57806369c212f6146101fc578063704f1b941461022c578063715018a6146102485761010b565b80630b1e7f8314610110578063392338f51461014657806340731c24146101625780634889275314610198575b600080fd5b61012a60048036038101906101259190611d1c565b61037d565b60405161013d9796959493929190611e29565b60405180910390f35b610160600480360381019061015b9190611fdb565b6104ff565b005b61017c60048036038101906101779190611d1c565b6106c7565b60405161018f9796959493929190611e29565b60405180910390f35b6101b260048036038101906101ad9190612053565b6108b2565b6040516101c193929190612093565b60405180910390f35b6101e460048036038101906101df9190612053565b610a96565b6040516101f393929190612093565b60405180910390f35b610216600480360381019061021191906120fd565b610b75565b6040516102239190612208565b60405180910390f35b6102466004803603810190610241919061222a565b610df2565b005b610250611035565b005b61026c60048036038101906102679190611d1c565b611049565b005b6102766112a0565b6040516102839190612273565b60405180910390f35b6102946112ad565b6040516102a1919061228e565b60405180910390f35b6102c460048036038101906102bf91906120fd565b6112d7565b6040516102d494939291906122b8565b60405180910390f35b6102f760048036038101906102f2919061230b565b611444565b005b610313600480360381019061030e9190611d1c565b6116ff565b6040516103209190612273565b60405180910390f35b610343600480360381019061033e91906120fd565b611717565b005b61035f600480360381019061035a9190611d1c565b61179d565b005b61037b6004803603810190610376919061222a565b6119bd565b005b6005818154811061038d57600080fd5b90600052602060002090600802016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010180546103d690612396565b80601f016020809104026020016040519081016040528092919081815260200182805461040290612396565b801561044f5780601f106104245761010080835404028352916020019161044f565b820191906000526020600020905b81548152906001019060200180831161043257829003601f168201915b50505050509080600201805461046490612396565b80601f016020809104026020016040519081016040528092919081815260200182805461049090612396565b80156104dd5780601f106104b2576101008083540402835291602001916104dd565b820191906000526020600020905b8154815290600101906020018083116104c057829003601f168201915b5050505050908060030154908060040154908060050154908060060154905087565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160149054906101000a900460ff1661058e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058590612413565b60405180910390fd5b60008251116105d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c99061247f565b60405180910390fd5b600060056001816001815401808255809150500390600052602060002090600802019050338160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508281600101908161064a919061264b565b508181600201908161065c919061264b565b50428160030181905550600081600601819055503373ffffffffffffffffffffffffffffffffffffffff167f4dc899ab633bbd3c97004820698910906a6748451e00b59a3e011358dc2f9fb58484426040516106ba9392919061271d565b60405180910390a2505050565b60006060806000806000806005805490508810610719576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610710906127ae565b60405180910390fd5b60006005898154811061072f5761072e6127ce565b5b906000526020600020906008020190508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010182600201836003015484600401548560050154866006015485805461078c90612396565b80601f01602080910402602001604051908101604052809291908181526020018280546107b890612396565b80156108055780601f106107da57610100808354040283529160200191610805565b820191906000526020600020905b8154815290600101906020018083116107e857829003601f168201915b5050505050955084805461081890612396565b80601f016020809104026020016040519081016040528092919081815260200182805461084490612396565b80156108915780601f1061086657610100808354040283529160200191610891565b820191906000526020600020905b81548152906001019060200180831161087457829003601f168201915b50505050509450975097509750975097509750975050919395979092949650565b60006060600060058054905085106108ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f6906127ae565b60405180910390fd5b60046000868152602001908152602001600020548410610954576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094b90612849565b60405180910390fd5b60006003600087815260200190815260200160002060008681526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180546109eb90612396565b80601f0160208091040260200160405190810160405280929190818152602001828054610a1790612396565b8015610a645780601f10610a3957610100808354040283529160200191610a64565b820191906000526020600020905b815481529060010190602001808311610a4757829003601f168201915b505050505081526020016002820154815250509050806000015181602001518260400151935093509350509250925092565b6003602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001018054610aec90612396565b80601f0160208091040260200160405190810160405280929190818152602001828054610b1890612396565b8015610b655780601f10610b3a57610100808354040283529160200191610b65565b820191906000526020600020905b815481529060010190602001808311610b4857829003601f168201915b5050505050908060020154905083565b610b7d611c92565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160149054906101000a900460ff16610c0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c03906128b5565b60405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806080016040529081600082018054610c6690612396565b80601f0160208091040260200160405190810160405280929190818152602001828054610c9290612396565b8015610cdf5780601f10610cb457610100808354040283529160200191610cdf565b820191906000526020600020905b815481529060010190602001808311610cc257829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900460ff16151515158152602001600282018054610d6990612396565b80601f0160208091040260200160405190810160405280929190818152602001828054610d9590612396565b8015610de25780601f10610db757610100808354040283529160200191610de2565b820191906000526020600020905b815481529060010190602001808311610dc557829003601f168201915b5050505050815250509050919050565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160149054906101000a900460ff1615610e82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7990612921565b60405180910390fd5b6000815111610ec6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ebd9061298d565b60405180910390fd5b60405180608001604052808281526020013373ffffffffffffffffffffffffffffffffffffffff16815260200160011515815260200160405180602001604052806000815250815250600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000019081610f63919061264b565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff0219169083151502179055506060820151816002019081610fe0919061264b565b509050503373ffffffffffffffffffffffffffffffffffffffff167f48cac28ad4dc618e15f4c2dd5e97751182f166de97b25618318b2112aa951a2f8260405161102a91906129ad565b60405180910390a250565b61103d611aed565b6110476000611b74565b565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160149054906101000a900460ff166110d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110cf90612413565b60405180910390fd5b6110e0611c3a565b6005805490508110611127576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111e906127ae565b60405180910390fd5b60006005828154811061113d5761113c6127ce565b5b906000526020600020906008020190508060070160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156111dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d390612a1b565b60405180910390fd5b8060040160008154809291906111f190612a6a565b919050555060018160070160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550813373ffffffffffffffffffffffffffffffffffffffff167f62500381f39eb6f48b6e6f104021ceeaca9e5354918dc17b4a15bf87c5f5d28b60405160405180910390a35061129d611c80565b50565b6000600580549050905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60026020528060005260406000206000915090508060000180546112fa90612396565b80601f016020809104026020016040519081016040528092919081815260200182805461132690612396565b80156113735780601f1061134857610100808354040283529160200191611373565b820191906000526020600020905b81548152906001019060200180831161135657829003601f168201915b5050505050908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160149054906101000a900460ff16908060020180546113c190612396565b80601f01602080910402602001604051908101604052809291908181526020018280546113ed90612396565b801561143a5780601f1061140f5761010080835404028352916020019161143a565b820191906000526020600020905b81548152906001019060200180831161141d57829003601f168201915b5050505050905084565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160149054906101000a900460ff166114d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ca90612413565b60405180910390fd5b6114db611c3a565b6005805490508210611522576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611519906127ae565b60405180910390fd5b6000815111611566576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155d90612afe565b60405180910390fd5b60006004600084815260200190815260200160002054905060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018381526020014281525060036000858152602001908152602001600020600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101908161162f919061264b565b506040820151816002015590505060046000848152602001908152602001600020600081548092919061166190612a6a565b91905055506005838154811061167a576116796127ce565b5b9060005260206000209060080201600501600081548092919061169c90612a6a565b9190505550823373ffffffffffffffffffffffffffffffffffffffff167fdb68d60a2d5659f0528e369fe9a8cfdbec13beb23609aa9a7a5c2a2d973117e484426040516116ea929190612b1e565b60405180910390a3506116fb611c80565b5050565b60046020528060005260406000206000915090505481565b61171f611aed565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036117915760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401611788919061228e565b60405180910390fd5b61179a81611b74565b50565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160149054906101000a900460ff1661182c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161182390612413565b60405180910390fd5b6005805490508110611873576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186a90612b9a565b60405180910390fd5b600060056001816001815401808255809150500390600052602060002090600802019050338160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600582815481106118ee576118ed6127ce565b5b906000526020600020906008020160010181600101908161190f9190612be5565b5060058281548110611924576119236127ce565b5b90600052602060002090600802016002018160020190816119459190612be5565b504281600301819055508181600601819055503373ffffffffffffffffffffffffffffffffffffffff167f1c03620db49e9abd75c892c4d5777b171bbcba631506a2fd6078694a4455808c8360016005805490506119a39190612ccd565b6040516119b1929190612d01565b60405180910390a25050565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160149054906101000a900460ff16611a4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a4390612413565b60405180910390fd5b80600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002019081611a9b919061264b565b503373ffffffffffffffffffffffffffffffffffffffff167f3e22697b8c73d3349d4c96c42842b506a4f025921d2a1006eab4e8b3edde50a982604051611ae291906129ad565b60405180910390a250565b611af5611c8a565b73ffffffffffffffffffffffffffffffffffffffff16611b136112ad565b73ffffffffffffffffffffffffffffffffffffffff1614611b7257611b36611c8a565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401611b69919061228e565b60405180910390fd5b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600260005403611c76576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600081905550565b6001600081905550565b600033905090565b604051806080016040528060608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600015158152602001606081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b611cf981611ce6565b8114611d0457600080fd5b50565b600081359050611d1681611cf0565b92915050565b600060208284031215611d3257611d31611cdc565b5b6000611d4084828501611d07565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611d7482611d49565b9050919050565b611d8481611d69565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611dc4578082015181840152602081019050611da9565b60008484015250505050565b6000601f19601f8301169050919050565b6000611dec82611d8a565b611df68185611d95565b9350611e06818560208601611da6565b611e0f81611dd0565b840191505092915050565b611e2381611ce6565b82525050565b600060e082019050611e3e600083018a611d7b565b8181036020830152611e508189611de1565b90508181036040830152611e648188611de1565b9050611e736060830187611e1a565b611e806080830186611e1a565b611e8d60a0830185611e1a565b611e9a60c0830184611e1a565b98975050505050505050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611ee882611dd0565b810181811067ffffffffffffffff82111715611f0757611f06611eb0565b5b80604052505050565b6000611f1a611cd2565b9050611f268282611edf565b919050565b600067ffffffffffffffff821115611f4657611f45611eb0565b5b611f4f82611dd0565b9050602081019050919050565b82818337600083830152505050565b6000611f7e611f7984611f2b565b611f10565b905082815260208101848484011115611f9a57611f99611eab565b5b611fa5848285611f5c565b509392505050565b600082601f830112611fc257611fc1611ea6565b5b8135611fd2848260208601611f6b565b91505092915050565b60008060408385031215611ff257611ff1611cdc565b5b600083013567ffffffffffffffff8111156120105761200f611ce1565b5b61201c85828601611fad565b925050602083013567ffffffffffffffff81111561203d5761203c611ce1565b5b61204985828601611fad565b9150509250929050565b6000806040838503121561206a57612069611cdc565b5b600061207885828601611d07565b925050602061208985828601611d07565b9150509250929050565b60006060820190506120a86000830186611d7b565b81810360208301526120ba8185611de1565b90506120c96040830184611e1a565b949350505050565b6120da81611d69565b81146120e557600080fd5b50565b6000813590506120f7816120d1565b92915050565b60006020828403121561211357612112611cdc565b5b6000612121848285016120e8565b91505092915050565b600082825260208201905092915050565b600061214682611d8a565b612150818561212a565b9350612160818560208601611da6565b61216981611dd0565b840191505092915050565b61217d81611d69565b82525050565b60008115159050919050565b61219881612183565b82525050565b600060808301600083015184820360008601526121bb828261213b565b91505060208301516121d06020860182612174565b5060408301516121e3604086018261218f565b50606083015184820360608601526121fb828261213b565b9150508091505092915050565b60006020820190508181036000830152612222818461219e565b905092915050565b6000602082840312156122405761223f611cdc565b5b600082013567ffffffffffffffff81111561225e5761225d611ce1565b5b61226a84828501611fad565b91505092915050565b60006020820190506122886000830184611e1a565b92915050565b60006020820190506122a36000830184611d7b565b92915050565b6122b281612183565b82525050565b600060808201905081810360008301526122d28187611de1565b90506122e16020830186611d7b565b6122ee60408301856122a9565b81810360608301526123008184611de1565b905095945050505050565b6000806040838503121561232257612321611cdc565b5b600061233085828601611d07565b925050602083013567ffffffffffffffff81111561235157612350611ce1565b5b61235d85828601611fad565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806123ae57607f821691505b6020821081036123c1576123c0612367565b5b50919050565b7f55736572206973206e6f74207265676973746572656400000000000000000000600082015250565b60006123fd601683611d95565b9150612408826123c7565b602082019050919050565b6000602082019050818103600083015261242c816123f0565b9050919050565b7f436f6e74656e742073686f756c64206e6f7420626520656d7074790000000000600082015250565b6000612469601b83611d95565b915061247482612433565b602082019050919050565b600060208201905081810360008301526124988161245c565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026125017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826124c4565b61250b86836124c4565b95508019841693508086168417925050509392505050565b6000819050919050565b600061254861254361253e84611ce6565b612523565b611ce6565b9050919050565b6000819050919050565b6125628361252d565b61257661256e8261254f565b8484546124d1565b825550505050565b600090565b61258b61257e565b612596818484612559565b505050565b5b818110156125ba576125af600082612583565b60018101905061259c565b5050565b601f8211156125ff576125d08161249f565b6125d9846124b4565b810160208510156125e8578190505b6125fc6125f4856124b4565b83018261259b565b50505b505050565b600082821c905092915050565b600061262260001984600802612604565b1980831691505092915050565b600061263b8383612611565b9150826002028217905092915050565b61265482611d8a565b67ffffffffffffffff81111561266d5761266c611eb0565b5b6126778254612396565b6126828282856125be565b600060209050601f8311600181146126b557600084156126a3578287015190505b6126ad858261262f565b865550612715565b601f1984166126c38661249f565b60005b828110156126eb578489015182556001820191506020850194506020810190506126c6565b868310156127085784890151612704601f891682612611565b8355505b6001600288020188555050505b505050505050565b600060608201905081810360008301526127378186611de1565b9050818103602083015261274b8185611de1565b905061275a6040830184611e1a565b949350505050565b7f506f737420646f6573206e6f7420657869737400000000000000000000000000600082015250565b6000612798601383611d95565b91506127a382612762565b602082019050919050565b600060208201905081810360008301526127c78161278b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f436f6d6d656e7420646f6573206e6f7420657869737400000000000000000000600082015250565b6000612833601683611d95565b915061283e826127fd565b602082019050919050565b6000602082019050818103600083015261286281612826565b9050919050565b7f55736572206e6f7420666f756e64000000000000000000000000000000000000600082015250565b600061289f600e83611d95565b91506128aa82612869565b602082019050919050565b600060208201905081810360008301526128ce81612892565b9050919050565b7f5573657220697320616c72656164792072656769737465726564000000000000600082015250565b600061290b601a83611d95565b9150612916826128d5565b602082019050919050565b6000602082019050818103600083015261293a816128fe565b9050919050565b7f557365726e616d652073686f756c64206e6f7420626520656d70747900000000600082015250565b6000612977601c83611d95565b915061298282612941565b602082019050919050565b600060208201905081810360008301526129a68161296a565b9050919050565b600060208201905081810360008301526129c78184611de1565b905092915050565b7f557365722068617320616c7265616479206c696b6564207468697320706f7374600082015250565b6000612a05602083611d95565b9150612a10826129cf565b602082019050919050565b60006020820190508181036000830152612a34816129f8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612a7582611ce6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612aa757612aa6612a3b565b5b600182019050919050565b7f436f6d6d656e742073686f756c64206e6f7420626520656d7074790000000000600082015250565b6000612ae8601b83611d95565b9150612af382612ab2565b602082019050919050565b60006020820190508181036000830152612b1781612adb565b9050919050565b60006040820190508181036000830152612b388185611de1565b9050612b476020830184611e1a565b9392505050565b7f4f726967696e616c20706f737420646f6573206e6f7420657869737400000000600082015250565b6000612b84601c83611d95565b9150612b8f82612b4e565b602082019050919050565b60006020820190508181036000830152612bb381612b77565b9050919050565b600081549050612bc981612396565b9050919050565b60008190508160005260206000209050919050565b818103612bf3575050612ccb565b612bfc82612bba565b67ffffffffffffffff811115612c1557612c14611eb0565b5b612c1f8254612396565b612c2a8282856125be565b6000601f831160018114612c595760008415612c47578287015490505b612c51858261262f565b865550612cc4565b601f198416612c6787612bd0565b9650612c728661249f565b60005b82811015612c9a57848901548255600182019150600185019450602081019050612c75565b86831015612cb75784890154612cb3601f891682612611565b8355505b6001600288020188555050505b5050505050505b565b6000612cd882611ce6565b9150612ce383611ce6565b9250828203905081811115612cfb57612cfa612a3b565b5b92915050565b6000604082019050612d166000830185611e1a565b612d236020830184611e1a565b939250505056fea2646970667358221220b2eeb5dde5b2c228a3baedca42b72634b510cdd8cc94b393bcdfcfdd8511109a64736f6c634300081c0033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createPost(string,string)": {
        "notice": "Creates a new post, optionally with an image"
      },
      "getPost(uint256)": {
        "notice": "Returns post data, including new image and originalPostId fields"
      },
      "setProfileImage(string)": {
        "notice": "Sets or updates the user's profile picture"
      },
      "sharePost(uint256)": {
        "notice": "Shares an existing post"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 188,
        "contract": "contracts/Chainchat.sol:Chainchat",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 8,
        "contract": "contracts/Chainchat.sol:Chainchat",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 269,
        "contract": "contracts/Chainchat.sol:Chainchat",
        "label": "users",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(User)264_storage)"
      },
      {
        "astId": 303,
        "contract": "contracts/Chainchat.sol:Chainchat",
        "label": "postComments",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Comment)296_storage))"
      },
      {
        "astId": 307,
        "contract": "contracts/Chainchat.sol:Chainchat",
        "label": "postCommentsCount",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 311,
        "contract": "contracts/Chainchat.sol:Chainchat",
        "label": "posts",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_struct(Post)289_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Post)289_storage)dyn_storage": {
        "base": "t_struct(Post)289_storage",
        "encoding": "dynamic_array",
        "label": "struct Chainchat.Post[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(User)264_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Chainchat.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)264_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Comment)296_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct Chainchat.Comment))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Comment)296_storage)"
      },
      "t_mapping(t_uint256,t_struct(Comment)296_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Chainchat.Comment)",
        "numberOfBytes": "32",
        "value": "t_struct(Comment)296_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Comment)296_storage": {
        "encoding": "inplace",
        "label": "struct Chainchat.Comment",
        "members": [
          {
            "astId": 291,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "commenter",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 293,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "content",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 295,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "timestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Post)289_storage": {
        "encoding": "inplace",
        "label": "struct Chainchat.Post",
        "members": [
          {
            "astId": 272,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "author",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 274,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "content",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 276,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "image",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 278,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "timestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 280,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "likes",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 282,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "commentsCount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 284,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "originalPostId",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 288,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "likedBy",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(User)264_storage": {
        "encoding": "inplace",
        "label": "struct Chainchat.User",
        "members": [
          {
            "astId": 257,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "username",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 259,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "userAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 261,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "isRegistered",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 263,
            "contract": "contracts/Chainchat.sol:Chainchat",
            "label": "profileImage",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}